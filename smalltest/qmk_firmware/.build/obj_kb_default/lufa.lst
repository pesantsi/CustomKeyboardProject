   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB124:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** 
  57:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  58:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  59:./tmk_core/protocol/lufa/lufa.c **** 
  60:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  61:./tmk_core/protocol/lufa/lufa.c **** #endif
  62:./tmk_core/protocol/lufa/lufa.c **** 
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  65:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  66:./tmk_core/protocol/lufa/lufa.c **** #endif
  67:./tmk_core/protocol/lufa/lufa.c **** 
  68:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  69:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  70:./tmk_core/protocol/lufa/lufa.c **** #endif
  71:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
  72:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  73:./tmk_core/protocol/lufa/lufa.c **** #endif
  74:./tmk_core/protocol/lufa/lufa.c **** 
  75:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  76:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  77:./tmk_core/protocol/lufa/lufa.c **** #endif
  78:./tmk_core/protocol/lufa/lufa.c **** 
  79:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  80:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  81:./tmk_core/protocol/lufa/lufa.c **** #endif
  82:./tmk_core/protocol/lufa/lufa.c **** 
  83:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  84:./tmk_core/protocol/lufa/lufa.c ****   #include "sysex_tools.h"
  85:./tmk_core/protocol/lufa/lufa.c **** #endif
  86:./tmk_core/protocol/lufa/lufa.c **** 
  87:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  88:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  89:./tmk_core/protocol/lufa/lufa.c **** #endif
  90:./tmk_core/protocol/lufa/lufa.c **** 
  91:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  92:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  94:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  95:./tmk_core/protocol/lufa/lufa.c **** 
  96:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  99:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 100:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device);
 101:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device);
 102:./tmk_core/protocol/lufa/lufa.c **** #endif
 103:./tmk_core/protocol/lufa/lufa.c **** 
 104:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 105:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 106:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 107:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 108:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 109:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 110:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 111:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 112:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 113:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 114:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 115:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 116:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 117:./tmk_core/protocol/lufa/lufa.c ****     usb_send_func,
 118:./tmk_core/protocol/lufa/lufa.c ****     usb_get_midi,
 119:./tmk_core/protocol/lufa/lufa.c ****     midi_usb_init
 120:./tmk_core/protocol/lufa/lufa.c **** #endif
 121:./tmk_core/protocol/lufa/lufa.c **** };
 122:./tmk_core/protocol/lufa/lufa.c **** 
 123:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 124:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 125:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 126:./tmk_core/protocol/lufa/lufa.c **** 
 127:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 128:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 129:./tmk_core/protocol/lufa/lufa.c **** {
 130:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 131:./tmk_core/protocol/lufa/lufa.c ****   {
 132:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 133:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 134:./tmk_core/protocol/lufa/lufa.c ****     {
 135:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 137:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 138:./tmk_core/protocol/lufa/lufa.c ****     },
 139:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 140:./tmk_core/protocol/lufa/lufa.c ****     {
 141:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 142:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 143:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 144:./tmk_core/protocol/lufa/lufa.c ****     },
 145:./tmk_core/protocol/lufa/lufa.c ****   },
 146:./tmk_core/protocol/lufa/lufa.c **** };
 147:./tmk_core/protocol/lufa/lufa.c **** 
 148:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_START_OR_CONT 0x40
 149:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_1 0x50
 150:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_2 0x60
 151:./tmk_core/protocol/lufa/lufa.c **** #define SYSEX_ENDS_IN_3 0x70
 152:./tmk_core/protocol/lufa/lufa.c **** 
 153:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_1 0x50
 154:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_2 0x20
 155:./tmk_core/protocol/lufa/lufa.c **** #define SYS_COMMON_3 0x30
 156:./tmk_core/protocol/lufa/lufa.c **** #endif
 157:./tmk_core/protocol/lufa/lufa.c **** 
 158:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 159:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 160:./tmk_core/protocol/lufa/lufa.c **** {
 161:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 162:./tmk_core/protocol/lufa/lufa.c ****   {
 163:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 164:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 165:./tmk_core/protocol/lufa/lufa.c ****     {
 166:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 167:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 168:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 169:./tmk_core/protocol/lufa/lufa.c ****     },
 170:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 171:./tmk_core/protocol/lufa/lufa.c ****     {
 172:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 173:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 174:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 175:./tmk_core/protocol/lufa/lufa.c ****     },
 176:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 177:./tmk_core/protocol/lufa/lufa.c ****     {
 178:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 179:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 180:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 181:./tmk_core/protocol/lufa/lufa.c ****     },
 182:./tmk_core/protocol/lufa/lufa.c ****   },
 183:./tmk_core/protocol/lufa/lufa.c **** };
 184:./tmk_core/protocol/lufa/lufa.c **** #endif
 185:./tmk_core/protocol/lufa/lufa.c **** 
 186:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 187:./tmk_core/protocol/lufa/lufa.c **** 
 188:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 189:./tmk_core/protocol/lufa/lufa.c **** {
 190:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 191:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 192:./tmk_core/protocol/lufa/lufa.c **** 	{
 193:./tmk_core/protocol/lufa/lufa.c **** 		return;
 194:./tmk_core/protocol/lufa/lufa.c **** 	}
 195:./tmk_core/protocol/lufa/lufa.c **** 
 196:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 197:./tmk_core/protocol/lufa/lufa.c **** 	{
 198:./tmk_core/protocol/lufa/lufa.c **** 		return;
 199:./tmk_core/protocol/lufa/lufa.c **** 	}
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 202:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 203:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 211:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 212:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 213:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 214:./tmk_core/protocol/lufa/lufa.c **** 	}
 215:./tmk_core/protocol/lufa/lufa.c **** 
 216:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 217:./tmk_core/protocol/lufa/lufa.c **** }
 218:./tmk_core/protocol/lufa/lufa.c **** 
 219:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 220:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 221:./tmk_core/protocol/lufa/lufa.c **** {
 222:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 223:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 224:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 225:./tmk_core/protocol/lufa/lufa.c **** }
 226:./tmk_core/protocol/lufa/lufa.c **** 
 227:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 228:./tmk_core/protocol/lufa/lufa.c **** {
 229:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 230:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 231:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 232:./tmk_core/protocol/lufa/lufa.c **** 
 233:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 234:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 235:./tmk_core/protocol/lufa/lufa.c **** 	return;
 236:./tmk_core/protocol/lufa/lufa.c **** 
 237:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 238:./tmk_core/protocol/lufa/lufa.c **** 
 239:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 240:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 241:./tmk_core/protocol/lufa/lufa.c **** 	{
 242:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 243:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 244:./tmk_core/protocol/lufa/lufa.c **** 		{
 245:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 246:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 247:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 248:./tmk_core/protocol/lufa/lufa.c **** 		}
 249:./tmk_core/protocol/lufa/lufa.c **** 
 250:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 251:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 252:./tmk_core/protocol/lufa/lufa.c **** 
 253:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 254:./tmk_core/protocol/lufa/lufa.c **** 		{
 255:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 256:./tmk_core/protocol/lufa/lufa.c **** 		}
 257:./tmk_core/protocol/lufa/lufa.c **** 	}
 258:./tmk_core/protocol/lufa/lufa.c **** }
 259:./tmk_core/protocol/lufa/lufa.c **** #endif
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 262:./tmk_core/protocol/lufa/lufa.c ****  * Console
 263:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 264:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 265:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 266:./tmk_core/protocol/lufa/lufa.c **** {
 267:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 268:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 269:./tmk_core/protocol/lufa/lufa.c ****         return;
 270:./tmk_core/protocol/lufa/lufa.c **** 
 271:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 272:./tmk_core/protocol/lufa/lufa.c **** 
 273:./tmk_core/protocol/lufa/lufa.c **** #if 0
 274:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 275:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 278:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 279:./tmk_core/protocol/lufa/lufa.c ****     {
 280:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 281:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 282:./tmk_core/protocol/lufa/lufa.c ****         {
 283:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 284:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 287:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 288:./tmk_core/protocol/lufa/lufa.c **** 
 289:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 290:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 291:./tmk_core/protocol/lufa/lufa.c ****         }
 292:./tmk_core/protocol/lufa/lufa.c **** 
 293:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 294:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 295:./tmk_core/protocol/lufa/lufa.c ****     }
 296:./tmk_core/protocol/lufa/lufa.c **** #endif
 297:./tmk_core/protocol/lufa/lufa.c **** 
 298:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 299:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 300:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 301:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 302:./tmk_core/protocol/lufa/lufa.c ****         return;
 303:./tmk_core/protocol/lufa/lufa.c ****     }
 304:./tmk_core/protocol/lufa/lufa.c **** 
 305:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 306:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 307:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 308:./tmk_core/protocol/lufa/lufa.c **** 
 309:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 310:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 311:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 312:./tmk_core/protocol/lufa/lufa.c ****     }
 313:./tmk_core/protocol/lufa/lufa.c **** 
 314:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 315:./tmk_core/protocol/lufa/lufa.c **** }
 316:./tmk_core/protocol/lufa/lufa.c **** #endif
 317:./tmk_core/protocol/lufa/lufa.c **** 
 318:./tmk_core/protocol/lufa/lufa.c **** 
 319:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 320:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 321:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 322:./tmk_core/protocol/lufa/lufa.c **** /*
 323:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 324:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 325:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 326:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 327:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 328:./tmk_core/protocol/lufa/lufa.c **** */
 329:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 330:./tmk_core/protocol/lufa/lufa.c **** {
 331:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 332:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 333:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 334:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 336:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 337:./tmk_core/protocol/lufa/lufa.c ****     }
 338:./tmk_core/protocol/lufa/lufa.c **** }
 339:./tmk_core/protocol/lufa/lufa.c **** 
 340:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 341:./tmk_core/protocol/lufa/lufa.c **** {
 342:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 343:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 344:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 345:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 346:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 347:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 348:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 349:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 350:./tmk_core/protocol/lufa/lufa.c ****     }
 351:./tmk_core/protocol/lufa/lufa.c **** */
 352:./tmk_core/protocol/lufa/lufa.c **** }
 353:./tmk_core/protocol/lufa/lufa.c **** 
 354:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 355:./tmk_core/protocol/lufa/lufa.c **** {
 356:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 357:./tmk_core/protocol/lufa/lufa.c **** }
 358:./tmk_core/protocol/lufa/lufa.c **** 
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 362:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 363:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 364:./tmk_core/protocol/lufa/lufa.c **** #endif
 365:./tmk_core/protocol/lufa/lufa.c **** }
 366:./tmk_core/protocol/lufa/lufa.c **** 
 367:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 368:./tmk_core/protocol/lufa/lufa.c **** {
 369:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 370:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 373:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 374:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 375:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 376:./tmk_core/protocol/lufa/lufa.c **** #endif
 377:./tmk_core/protocol/lufa/lufa.c **** }
 378:./tmk_core/protocol/lufa/lufa.c **** 
 379:./tmk_core/protocol/lufa/lufa.c **** 
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 382:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 383:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 384:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 385:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 386:./tmk_core/protocol/lufa/lufa.c ****   } \
 387:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 388:./tmk_core/protocol/lufa/lufa.c **** 
 389:./tmk_core/protocol/lufa/lufa.c **** // called every 1ms
 390:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 391:./tmk_core/protocol/lufa/lufa.c **** {
 392:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 393:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 394:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 395:./tmk_core/protocol/lufa/lufa.c **** 
 396:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 397:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 398:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 399:./tmk_core/protocol/lufa/lufa.c **** }
 400:./tmk_core/protocol/lufa/lufa.c **** 
 401:./tmk_core/protocol/lufa/lufa.c **** #endif
 402:./tmk_core/protocol/lufa/lufa.c **** 
 403:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ConfigurationChanged event.
 404:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 405:./tmk_core/protocol/lufa/lufa.c ****  *
 406:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 407:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use singl bank for all endpoints.
 408:./tmk_core/protocol/lufa/lufa.c ****  */
 409:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 410:./tmk_core/protocol/lufa/lufa.c **** {
 411:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 412:./tmk_core/protocol/lufa/lufa.c **** 
 413:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 414:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 415:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 416:./tmk_core/protocol/lufa/lufa.c **** 
 417:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 418:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 419:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 420:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 421:./tmk_core/protocol/lufa/lufa.c **** #endif
 422:./tmk_core/protocol/lufa/lufa.c **** 
 423:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 424:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 425:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 426:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 427:./tmk_core/protocol/lufa/lufa.c **** #endif
 428:./tmk_core/protocol/lufa/lufa.c **** 
 429:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 430:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 431:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 432:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 433:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 434:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 435:./tmk_core/protocol/lufa/lufa.c **** #endif
 436:./tmk_core/protocol/lufa/lufa.c **** 
 437:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 438:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #if 0
 442:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 443:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 444:./tmk_core/protocol/lufa/lufa.c **** #endif
 445:./tmk_core/protocol/lufa/lufa.c **** #endif
 446:./tmk_core/protocol/lufa/lufa.c **** 
 447:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 448:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 449:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 450:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 451:./tmk_core/protocol/lufa/lufa.c **** #endif
 452:./tmk_core/protocol/lufa/lufa.c **** 
 453:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 454:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 455:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 456:./tmk_core/protocol/lufa/lufa.c **** #endif
 457:./tmk_core/protocol/lufa/lufa.c **** 
 458:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 459:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 460:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 461:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 462:./tmk_core/protocol/lufa/lufa.c **** #endif
 463:./tmk_core/protocol/lufa/lufa.c **** }
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** /*
 466:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 467:./tmk_core/protocol/lufa/lufa.c **** 
 468:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 469:./tmk_core/protocol/lufa/lufa.c **** 
 470:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 471:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 472:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 473:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 475:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 476:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 477:./tmk_core/protocol/lufa/lufa.c **** */
 478:./tmk_core/protocol/lufa/lufa.c **** /** Event handler for the USB_ControlRequest event.
 479:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 480:./tmk_core/protocol/lufa/lufa.c ****  */
 481:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 482:./tmk_core/protocol/lufa/lufa.c **** {
 483:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 484:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 485:./tmk_core/protocol/lufa/lufa.c **** 
 486:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 487:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 488:./tmk_core/protocol/lufa/lufa.c ****     {
 489:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 490:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 491:./tmk_core/protocol/lufa/lufa.c ****             {
 492:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 493:./tmk_core/protocol/lufa/lufa.c **** 
 494:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 495:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 496:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 497:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 498:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 499:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 500:./tmk_core/protocol/lufa/lufa.c ****                     break;
 501:./tmk_core/protocol/lufa/lufa.c ****                 }
 502:./tmk_core/protocol/lufa/lufa.c **** 
 503:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 504:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 505:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 506:./tmk_core/protocol/lufa/lufa.c ****             }
 507:./tmk_core/protocol/lufa/lufa.c **** 
 508:./tmk_core/protocol/lufa/lufa.c ****             break;
 509:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 510:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 511:./tmk_core/protocol/lufa/lufa.c ****             {
 512:./tmk_core/protocol/lufa/lufa.c **** 
 513:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 514:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 515:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 517:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 518:./tmk_core/protocol/lufa/lufa.c **** #endif
 519:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 520:./tmk_core/protocol/lufa/lufa.c **** 
 521:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 522:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 523:./tmk_core/protocol/lufa/lufa.c ****                           return;
 524:./tmk_core/protocol/lufa/lufa.c ****                     }
 525:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 526:./tmk_core/protocol/lufa/lufa.c **** 
 527:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 528:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 529:./tmk_core/protocol/lufa/lufa.c ****                     break;
 530:./tmk_core/protocol/lufa/lufa.c ****                 }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             }
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****             break;
 535:./tmk_core/protocol/lufa/lufa.c **** 
 536:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 537:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 538:./tmk_core/protocol/lufa/lufa.c ****             {
 539:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 541:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 543:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 544:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 545:./tmk_core/protocol/lufa/lufa.c ****                 }
 546:./tmk_core/protocol/lufa/lufa.c ****             }
 547:./tmk_core/protocol/lufa/lufa.c **** 
 548:./tmk_core/protocol/lufa/lufa.c ****             break;
 549:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 550:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 551:./tmk_core/protocol/lufa/lufa.c ****             {
 552:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 553:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 554:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 555:./tmk_core/protocol/lufa/lufa.c **** 
 556:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 557:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 558:./tmk_core/protocol/lufa/lufa.c ****                 }
 559:./tmk_core/protocol/lufa/lufa.c ****             }
 560:./tmk_core/protocol/lufa/lufa.c **** 
 561:./tmk_core/protocol/lufa/lufa.c ****             break;
 562:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 563:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 564:./tmk_core/protocol/lufa/lufa.c ****             {
 565:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 566:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 567:./tmk_core/protocol/lufa/lufa.c **** 
 568:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 569:./tmk_core/protocol/lufa/lufa.c ****             }
 570:./tmk_core/protocol/lufa/lufa.c **** 
 571:./tmk_core/protocol/lufa/lufa.c ****             break;
 572:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 573:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 574:./tmk_core/protocol/lufa/lufa.c ****             {
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 576:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 578:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 579:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 580:./tmk_core/protocol/lufa/lufa.c ****             }
 581:./tmk_core/protocol/lufa/lufa.c **** 
 582:./tmk_core/protocol/lufa/lufa.c ****             break;
 583:./tmk_core/protocol/lufa/lufa.c ****     }
 584:./tmk_core/protocol/lufa/lufa.c **** 
 585:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 586:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 587:./tmk_core/protocol/lufa/lufa.c **** #endif
 588:./tmk_core/protocol/lufa/lufa.c **** }
 589:./tmk_core/protocol/lufa/lufa.c **** 
 590:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 591:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 592:./tmk_core/protocol/lufa/lufa.c **** p
 593:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 594:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 595:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 595 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 596:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
  21               		.loc 1 596 5 view .LVU1
 597:./tmk_core/protocol/lufa/lufa.c **** }
  22               		.loc 1 597 1 is_stmt 0 view .LVU2
  23 0000 8091 0000 		lds r24,keyboard_led_stats
  24               	/* epilogue start */
  25 0004 0895      		ret
  26               		.cfi_endproc
  27               	.LFE124:
  29               		.section	.text.send_consumer,"ax",@progbits
  31               	send_consumer:
  32               	.LVL0:
  33               	.LFB129:
 598:./tmk_core/protocol/lufa/lufa.c **** 
 599:./tmk_core/protocol/lufa/lufa.c **** #define SendToUSB 1
 600:./tmk_core/protocol/lufa/lufa.c **** #define SendToBT  2
 601:./tmk_core/protocol/lufa/lufa.c **** #define SendToBLE 4
 602:./tmk_core/protocol/lufa/lufa.c **** 
 603:./tmk_core/protocol/lufa/lufa.c **** static inline uint8_t where_to_send(void) {
 604:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 605:./tmk_core/protocol/lufa/lufa.c **** #if 0
 606:./tmk_core/protocol/lufa/lufa.c ****   if (adafruit_ble_is_connected()) {
 607:./tmk_core/protocol/lufa/lufa.c ****     // For testing, send to BLE as a priority
 608:./tmk_core/protocol/lufa/lufa.c ****     return SendToBLE;
 609:./tmk_core/protocol/lufa/lufa.c ****   }
 610:./tmk_core/protocol/lufa/lufa.c **** #endif
 611:./tmk_core/protocol/lufa/lufa.c **** 
 612:./tmk_core/protocol/lufa/lufa.c ****   // This is the real policy
 613:./tmk_core/protocol/lufa/lufa.c ****   if (USB_DeviceState != DEVICE_STATE_Configured) {
 614:./tmk_core/protocol/lufa/lufa.c ****     if (adafruit_ble_is_connected()) {
 615:./tmk_core/protocol/lufa/lufa.c ****       return SendToBLE;
 616:./tmk_core/protocol/lufa/lufa.c ****     }
 617:./tmk_core/protocol/lufa/lufa.c ****   }
 618:./tmk_core/protocol/lufa/lufa.c **** #endif
 619:./tmk_core/protocol/lufa/lufa.c ****   return ((USB_DeviceState == DEVICE_STATE_Configured) ? SendToUSB : 0)
 620:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 621:./tmk_core/protocol/lufa/lufa.c ****     || SendToBT
 622:./tmk_core/protocol/lufa/lufa.c **** #endif
 623:./tmk_core/protocol/lufa/lufa.c ****     ;
 624:./tmk_core/protocol/lufa/lufa.c **** }
 625:./tmk_core/protocol/lufa/lufa.c **** 
 626:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 627:./tmk_core/protocol/lufa/lufa.c **** {
 628:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 629:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 630:./tmk_core/protocol/lufa/lufa.c ****     for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 631:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 632:./tmk_core/protocol/lufa/lufa.c ****     }
 633:./tmk_core/protocol/lufa/lufa.c **** #endif
 634:./tmk_core/protocol/lufa/lufa.c **** 
 635:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 636:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 637:./tmk_core/protocol/lufa/lufa.c **** 
 638:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 639:./tmk_core/protocol/lufa/lufa.c ****     if (where & SendToBLE) {
 640:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 641:./tmk_core/protocol/lufa/lufa.c ****     }
 642:./tmk_core/protocol/lufa/lufa.c **** #endif
 643:./tmk_core/protocol/lufa/lufa.c **** 
 644:./tmk_core/protocol/lufa/lufa.c ****     if (!(where & SendToUSB)) {
 645:./tmk_core/protocol/lufa/lufa.c ****       return;
 646:./tmk_core/protocol/lufa/lufa.c ****     }
 647:./tmk_core/protocol/lufa/lufa.c **** 
 648:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 649:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 650:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 651:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 652:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 653:./tmk_core/protocol/lufa/lufa.c **** 
 654:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 655:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 656:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 657:./tmk_core/protocol/lufa/lufa.c **** 
 658:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 659:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 660:./tmk_core/protocol/lufa/lufa.c ****     }
 661:./tmk_core/protocol/lufa/lufa.c ****     else
 662:./tmk_core/protocol/lufa/lufa.c **** #endif
 663:./tmk_core/protocol/lufa/lufa.c ****     {
 664:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 665:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 666:./tmk_core/protocol/lufa/lufa.c **** 
 667:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 668:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 669:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 670:./tmk_core/protocol/lufa/lufa.c **** 
 671:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 672:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 673:./tmk_core/protocol/lufa/lufa.c ****     }
 674:./tmk_core/protocol/lufa/lufa.c **** 
 675:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 676:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 677:./tmk_core/protocol/lufa/lufa.c **** 
 678:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 679:./tmk_core/protocol/lufa/lufa.c **** }
 680:./tmk_core/protocol/lufa/lufa.c **** 
 681:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 682:./tmk_core/protocol/lufa/lufa.c **** {
 683:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 684:./tmk_core/protocol/lufa/lufa.c **** 
 685:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 686:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 687:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 688:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x03);
 689:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->buttons);
 690:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->x);
 691:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->y);
 692:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->v); // should try sending the wheel v here
 693:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(report->h); // should try sending the wheel h here
 694:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 695:./tmk_core/protocol/lufa/lufa.c **** #endif
 696:./tmk_core/protocol/lufa/lufa.c **** 
 697:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 700:./tmk_core/protocol/lufa/lufa.c **** 
 701:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 702:./tmk_core/protocol/lufa/lufa.c ****     if (where & SendToBLE) {
 703:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 704:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h);
 705:./tmk_core/protocol/lufa/lufa.c ****     }
 706:./tmk_core/protocol/lufa/lufa.c **** #endif
 707:./tmk_core/protocol/lufa/lufa.c ****     if (!(where & SendToUSB)) {
 708:./tmk_core/protocol/lufa/lufa.c ****       return;
 709:./tmk_core/protocol/lufa/lufa.c ****     }
 710:./tmk_core/protocol/lufa/lufa.c **** 
 711:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 712:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 715:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 716:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 717:./tmk_core/protocol/lufa/lufa.c **** 
 718:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 719:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 720:./tmk_core/protocol/lufa/lufa.c **** 
 721:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 722:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 723:./tmk_core/protocol/lufa/lufa.c **** #endif
 724:./tmk_core/protocol/lufa/lufa.c **** }
 725:./tmk_core/protocol/lufa/lufa.c **** 
 726:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 727:./tmk_core/protocol/lufa/lufa.c **** {
 728:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 729:./tmk_core/protocol/lufa/lufa.c **** 
 730:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 731:./tmk_core/protocol/lufa/lufa.c ****         return;
 732:./tmk_core/protocol/lufa/lufa.c **** 
 733:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 734:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 735:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 736:./tmk_core/protocol/lufa/lufa.c ****     };
 737:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 740:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 741:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 742:./tmk_core/protocol/lufa/lufa.c **** 
 743:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 744:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 745:./tmk_core/protocol/lufa/lufa.c **** }
 746:./tmk_core/protocol/lufa/lufa.c **** 
 747:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 748:./tmk_core/protocol/lufa/lufa.c **** {
  34               		.loc 1 748 1 is_stmt 1 view -0
  35               		.cfi_startproc
  36               		.loc 1 748 1 is_stmt 0 view .LVU4
  37 0000 CF93      		push r28
  38               	.LCFI0:
  39               		.cfi_def_cfa_offset 3
  40               		.cfi_offset 28, -2
  41 0002 DF93      		push r29
  42               	.LCFI1:
  43               		.cfi_def_cfa_offset 4
  44               		.cfi_offset 29, -3
  45 0004 00D0      		rcall .
  46 0006 0F92      		push __tmp_reg__
  47               	.LCFI2:
  48               		.cfi_def_cfa_offset 7
  49 0008 CDB7      		in r28,__SP_L__
  50 000a DEB7      		in r29,__SP_H__
  51               	.LCFI3:
  52               		.cfi_def_cfa_register 28
  53               	/* prologue: function */
  54               	/* frame size = 3 */
  55               	/* stack size = 5 */
  56               	.L__stack_usage = 5
  57 000c 9C01      		movw r18,r24
 749:./tmk_core/protocol/lufa/lufa.c **** 
 750:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 751:./tmk_core/protocol/lufa/lufa.c ****     static uint16_t last_data = 0;
 752:./tmk_core/protocol/lufa/lufa.c ****     if (data == last_data) return;
 753:./tmk_core/protocol/lufa/lufa.c ****     last_data = data;
 754:./tmk_core/protocol/lufa/lufa.c ****     uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 755:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0xFD);
 756:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 757:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x02);
 758:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send((bitmap>>8)&0xFF);
 759:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(bitmap&0xFF);
 760:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 761:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 762:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 763:./tmk_core/protocol/lufa/lufa.c ****     bluefruit_serial_send(0x00);
 764:./tmk_core/protocol/lufa/lufa.c **** #endif
 765:./tmk_core/protocol/lufa/lufa.c **** 
 766:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
  58               		.loc 1 766 5 is_stmt 1 view .LVU5
  59               	.LVL1:
 767:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  60               		.loc 1 767 5 view .LVU6
  61               	.LBB157:
  62               	.LBI157:
 603:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
  63               		.loc 1 603 23 view .LVU7
  64               	.LBB158:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  65               		.loc 1 619 3 view .LVU8
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  66               		.loc 1 619 68 is_stmt 0 view .LVU9
  67 000e 8091 0000 		lds r24,USB_DeviceState
  68               	.LVL2:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  69               		.loc 1 619 68 view .LVU10
  70               	.LBE158:
  71               	.LBE157:
 768:./tmk_core/protocol/lufa/lufa.c **** 
 769:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 770:./tmk_core/protocol/lufa/lufa.c ****     if (where & SendToBLE) {
 771:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_consumer_key(data, 0);
 772:./tmk_core/protocol/lufa/lufa.c ****     }
 773:./tmk_core/protocol/lufa/lufa.c **** #endif
 774:./tmk_core/protocol/lufa/lufa.c ****     if (!(where & SendToUSB)) {
  72               		.loc 1 774 5 is_stmt 1 view .LVU11
  73               		.loc 1 774 8 is_stmt 0 view .LVU12
  74 0012 8430      		cpi r24,lo8(4)
  75 0014 01F4      		brne .L2
 775:./tmk_core/protocol/lufa/lufa.c ****       return;
 776:./tmk_core/protocol/lufa/lufa.c ****     }
 777:./tmk_core/protocol/lufa/lufa.c **** 
 778:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  76               		.loc 1 778 5 is_stmt 1 view .LVU13
  77               		.loc 1 778 20 is_stmt 0 view .LVU14
  78 0016 93E0      		ldi r25,lo8(3)
  79 0018 9983      		std Y+1,r25
  80 001a 3B83      		std Y+3,r19
  81 001c 2A83      		std Y+2,r18
 779:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 780:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 781:./tmk_core/protocol/lufa/lufa.c ****     };
 782:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
  82               		.loc 1 782 5 is_stmt 1 view .LVU15
  83               	.LVL3:
  84               	.LBB159:
  85               	.LBI159:
  86               		.file 2 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
  87               		.loc 2 267 23 view .LVU16
  88               	.LBB160:
 268:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  89               		.loc 2 270 6 view .LVU17
  90               		.loc 2 270 12 is_stmt 0 view .LVU18
  91 001e 9093 E900 		sts 233,r25
  92               	.LVL4:
  93               		.loc 2 270 12 view .LVU19
  94 0022 8FEF      		ldi r24,lo8(-1)
  95               	.LVL5:
  96               	.L4:
  97               		.loc 2 270 12 view .LVU20
  98               	.LBE160:
  99               	.LBE159:
 100               	.LBB161:
 101               	.LBI161:
 271:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 102               		.loc 2 358 23 is_stmt 1 view .LVU21
 103               	.LBB162:
 359:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 104               		.loc 2 360 5 view .LVU22
 105               		.loc 2 360 14 is_stmt 0 view .LVU23
 106 0024 9091 E800 		lds r25,232
 107 0028 8150      		subi r24,lo8(-(-1))
 108               	.LVL6:
 109               		.loc 2 360 14 view .LVU24
 110               	.LBE162:
 111               	.LBE161:
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 785:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 112               		.loc 1 785 22 view .LVU25
 113 002a 95FD      		sbrc r25,5
 114 002c 00C0      		rjmp .L5
 115               		.loc 1 785 57 is_stmt 1 view .LVU26
 116               	.LVL7:
 117               	.LBB163:
 118               	.LBI163:
 119               		.file 3 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 120               		.loc 3 255 1 view .LVU27
 121               	.LBB164:
 256:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 122               		.loc 3 257 2 view .LVU28
 258:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 123               		.loc 3 261 2 view .LVU29
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 124               		.loc 3 262 2 view .LVU30
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 125               		.loc 3 263 2 view .LVU31
 264:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 126               		.loc 3 273 3 view .LVU32
 274:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 127               		.loc 3 276 2 view .LVU33
 128 002e 95ED      		ldi r25,lo8(-43)
 129 0030 9A95      	1:	dec r25
 130 0032 01F4      		brne 1b
 131 0034 0000      		nop
 132               	.LVL8:
 133               		.loc 3 276 2 is_stmt 0 view .LVU34
 134               	.LBE164:
 135               	.LBE163:
 136               		.loc 1 785 11 view .LVU35
 137 0036 8111      		cpse r24,__zero_reg__
 138 0038 00C0      		rjmp .L4
 139               	.LVL9:
 140               	.L5:
 786:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 141               		.loc 1 786 5 is_stmt 1 view .LVU36
 142               	.LBB165:
 143               	.LBI165:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 144               		.loc 2 358 23 view .LVU37
 145               	.LBB166:
 146               		.loc 2 360 5 view .LVU38
 147               		.loc 2 360 14 is_stmt 0 view .LVU39
 148 003a 8091 E800 		lds r24,232
 149               	.LBE166:
 150               	.LBE165:
 151               		.loc 1 786 8 view .LVU40
 152 003e 85FF      		sbrs r24,5
 153 0040 00C0      		rjmp .L2
 787:./tmk_core/protocol/lufa/lufa.c **** 
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 154               		.loc 1 788 5 is_stmt 1 view .LVU41
 155 0042 50E0      		ldi r21,0
 156 0044 40E0      		ldi r20,0
 157 0046 63E0      		ldi r22,lo8(3)
 158 0048 70E0      		ldi r23,0
 159 004a CE01      		movw r24,r28
 160 004c 0196      		adiw r24,1
 161 004e 0E94 0000 		call Endpoint_Write_Stream_LE
 162               	.LVL10:
 789:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 163               		.loc 1 789 5 view .LVU42
 164               	.LBB167:
 165               	.LBI167:
 361:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 166               		.loc 2 453 23 view .LVU43
 167               	.LBB168:
 454:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 168               		.loc 2 456 6 view .LVU44
 169               		.loc 2 456 13 is_stmt 0 view .LVU45
 170 0052 8091 E800 		lds r24,232
 171 0056 8E77      		andi r24,lo8(126)
 172 0058 8093 E800 		sts 232,r24
 173               	.LVL11:
 174               	.L2:
 175               	/* epilogue start */
 176               		.loc 2 456 13 view .LVU46
 177               	.LBE168:
 178               	.LBE167:
 790:./tmk_core/protocol/lufa/lufa.c **** }
 179               		.loc 1 790 1 view .LVU47
 180 005c 0F90      		pop __tmp_reg__
 181 005e 0F90      		pop __tmp_reg__
 182 0060 0F90      		pop __tmp_reg__
 183 0062 DF91      		pop r29
 184 0064 CF91      		pop r28
 185 0066 0895      		ret
 186               		.cfi_endproc
 187               	.LFE129:
 189               		.section	.text.send_system,"ax",@progbits
 191               	send_system:
 192               	.LVL12:
 193               	.LFB128:
 727:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 194               		.loc 1 727 1 is_stmt 1 view -0
 195               		.cfi_startproc
 727:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 196               		.loc 1 727 1 is_stmt 0 view .LVU49
 197 0000 CF93      		push r28
 198               	.LCFI4:
 199               		.cfi_def_cfa_offset 3
 200               		.cfi_offset 28, -2
 201 0002 DF93      		push r29
 202               	.LCFI5:
 203               		.cfi_def_cfa_offset 4
 204               		.cfi_offset 29, -3
 205 0004 00D0      		rcall .
 206 0006 0F92      		push __tmp_reg__
 207               	.LCFI6:
 208               		.cfi_def_cfa_offset 7
 209 0008 CDB7      		in r28,__SP_L__
 210 000a DEB7      		in r29,__SP_H__
 211               	.LCFI7:
 212               		.cfi_def_cfa_register 28
 213               	/* prologue: function */
 214               	/* frame size = 3 */
 215               	/* stack size = 5 */
 216               	.L__stack_usage = 5
 728:./tmk_core/protocol/lufa/lufa.c **** 
 217               		.loc 1 728 5 is_stmt 1 view .LVU50
 218               	.LVL13:
 730:./tmk_core/protocol/lufa/lufa.c ****         return;
 219               		.loc 1 730 5 view .LVU51
 730:./tmk_core/protocol/lufa/lufa.c ****         return;
 220               		.loc 1 730 25 is_stmt 0 view .LVU52
 221 000c 2091 0000 		lds r18,USB_DeviceState
 730:./tmk_core/protocol/lufa/lufa.c ****         return;
 222               		.loc 1 730 8 view .LVU53
 223 0010 2430      		cpi r18,lo8(4)
 224 0012 01F4      		brne .L14
 733:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 225               		.loc 1 733 5 is_stmt 1 view .LVU54
 733:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 226               		.loc 1 733 20 is_stmt 0 view .LVU55
 227 0014 22E0      		ldi r18,lo8(2)
 228 0016 2983      		std Y+1,r18
 735:./tmk_core/protocol/lufa/lufa.c ****     };
 229               		.loc 1 735 43 view .LVU56
 230 0018 8058      		subi r24,-128
 231 001a 9109      		sbc r25,__zero_reg__
 232               	.LVL14:
 733:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 233               		.loc 1 733 20 view .LVU57
 234 001c 9B83      		std Y+3,r25
 235 001e 8A83      		std Y+2,r24
 737:./tmk_core/protocol/lufa/lufa.c **** 
 236               		.loc 1 737 5 is_stmt 1 view .LVU58
 237               	.LVL15:
 238               	.LBB169:
 239               	.LBI169:
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240               		.loc 2 267 23 view .LVU59
 241               	.LBB170:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 242               		.loc 2 270 6 view .LVU60
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 243               		.loc 2 270 12 is_stmt 0 view .LVU61
 244 0020 83E0      		ldi r24,lo8(3)
 245               	.LVL16:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 246               		.loc 2 270 12 view .LVU62
 247 0022 8093 E900 		sts 233,r24
 248               	.LVL17:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 249               		.loc 2 270 12 view .LVU63
 250 0026 8FEF      		ldi r24,lo8(-1)
 251               	.LVL18:
 252               	.L16:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 253               		.loc 2 270 12 view .LVU64
 254               	.LBE170:
 255               	.LBE169:
 256               	.LBB171:
 257               	.LBI171:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 258               		.loc 2 358 23 is_stmt 1 view .LVU65
 259               	.LBB172:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 260               		.loc 2 360 5 view .LVU66
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 261               		.loc 2 360 14 is_stmt 0 view .LVU67
 262 0028 9091 E800 		lds r25,232
 263 002c 8150      		subi r24,lo8(-(-1))
 264               	.LVL19:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 265               		.loc 2 360 14 view .LVU68
 266               	.LBE172:
 267               	.LBE171:
 740:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 268               		.loc 1 740 22 view .LVU69
 269 002e 95FD      		sbrc r25,5
 270 0030 00C0      		rjmp .L17
 740:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 271               		.loc 1 740 57 is_stmt 1 view .LVU70
 272               	.LVL20:
 273               	.LBB173:
 274               	.LBI173:
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 275               		.loc 3 255 1 view .LVU71
 276               	.LBB174:
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 277               		.loc 3 257 2 view .LVU72
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 278               		.loc 3 261 2 view .LVU73
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 279               		.loc 3 262 2 view .LVU74
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 280               		.loc 3 263 2 view .LVU75
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 281               		.loc 3 273 3 view .LVU76
 282               		.loc 3 276 2 view .LVU77
 283 0032 95ED      		ldi r25,lo8(-43)
 284 0034 9A95      	1:	dec r25
 285 0036 01F4      		brne 1b
 286 0038 0000      		nop
 287               	.LVL21:
 288               		.loc 3 276 2 is_stmt 0 view .LVU78
 289               	.LBE174:
 290               	.LBE173:
 740:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 291               		.loc 1 740 11 view .LVU79
 292 003a 8111      		cpse r24,__zero_reg__
 293 003c 00C0      		rjmp .L16
 294               	.LVL22:
 295               	.L17:
 741:./tmk_core/protocol/lufa/lufa.c **** 
 296               		.loc 1 741 5 is_stmt 1 view .LVU80
 297               	.LBB175:
 298               	.LBI175:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 299               		.loc 2 358 23 view .LVU81
 300               	.LBB176:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 301               		.loc 2 360 5 view .LVU82
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 302               		.loc 2 360 14 is_stmt 0 view .LVU83
 303 003e 8091 E800 		lds r24,232
 304               	.LBE176:
 305               	.LBE175:
 741:./tmk_core/protocol/lufa/lufa.c **** 
 306               		.loc 1 741 8 view .LVU84
 307 0042 85FF      		sbrs r24,5
 308 0044 00C0      		rjmp .L14
 743:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 309               		.loc 1 743 5 is_stmt 1 view .LVU85
 310 0046 50E0      		ldi r21,0
 311 0048 40E0      		ldi r20,0
 312 004a 63E0      		ldi r22,lo8(3)
 313 004c 70E0      		ldi r23,0
 314 004e CE01      		movw r24,r28
 315 0050 0196      		adiw r24,1
 316 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 317               	.LVL23:
 744:./tmk_core/protocol/lufa/lufa.c **** }
 318               		.loc 1 744 5 view .LVU86
 319               	.LBB177:
 320               	.LBI177:
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 321               		.loc 2 453 23 view .LVU87
 322               	.LBB178:
 323               		.loc 2 456 6 view .LVU88
 324               		.loc 2 456 13 is_stmt 0 view .LVU89
 325 0056 8091 E800 		lds r24,232
 326 005a 8E77      		andi r24,lo8(126)
 327 005c 8093 E800 		sts 232,r24
 328               	.LVL24:
 329               	.L14:
 330               	/* epilogue start */
 331               		.loc 2 456 13 view .LVU90
 332               	.LBE178:
 333               	.LBE177:
 745:./tmk_core/protocol/lufa/lufa.c **** 
 334               		.loc 1 745 1 view .LVU91
 335 0060 0F90      		pop __tmp_reg__
 336 0062 0F90      		pop __tmp_reg__
 337 0064 0F90      		pop __tmp_reg__
 338 0066 DF91      		pop r29
 339 0068 CF91      		pop r28
 340 006a 0895      		ret
 341               		.cfi_endproc
 342               	.LFE128:
 344               		.section	.text.send_mouse,"ax",@progbits
 346               	send_mouse:
 347               	.LVL25:
 348               	.LFB127:
 682:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 349               		.loc 1 682 1 is_stmt 1 view -0
 350               		.cfi_startproc
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 682:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 355               		.loc 1 682 1 is_stmt 0 view .LVU93
 356 0000 9C01      		movw r18,r24
 697:./tmk_core/protocol/lufa/lufa.c **** 
 357               		.loc 1 697 5 is_stmt 1 view .LVU94
 358               	.LVL26:
 699:./tmk_core/protocol/lufa/lufa.c **** 
 359               		.loc 1 699 5 view .LVU95
 360               	.LBB179:
 361               	.LBI179:
 603:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 362               		.loc 1 603 23 view .LVU96
 363               	.LBB180:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 364               		.loc 1 619 3 view .LVU97
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 365               		.loc 1 619 68 is_stmt 0 view .LVU98
 366 0002 8091 0000 		lds r24,USB_DeviceState
 367               	.LVL27:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 368               		.loc 1 619 68 view .LVU99
 369               	.LBE180:
 370               	.LBE179:
 707:./tmk_core/protocol/lufa/lufa.c ****       return;
 371               		.loc 1 707 5 is_stmt 1 view .LVU100
 707:./tmk_core/protocol/lufa/lufa.c ****       return;
 372               		.loc 1 707 8 is_stmt 0 view .LVU101
 373 0006 8430      		cpi r24,lo8(4)
 374 0008 01F4      		brne .L26
 712:./tmk_core/protocol/lufa/lufa.c **** 
 375               		.loc 1 712 5 is_stmt 1 view .LVU102
 376               	.LVL28:
 377               	.LBB181:
 378               	.LBI181:
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 379               		.loc 2 267 23 view .LVU103
 380               	.LBB182:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 381               		.loc 2 270 6 view .LVU104
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 382               		.loc 2 270 12 is_stmt 0 view .LVU105
 383 000a 82E0      		ldi r24,lo8(2)
 384               	.LVL29:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 385               		.loc 2 270 12 view .LVU106
 386 000c 8093 E900 		sts 233,r24
 387               	.LVL30:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 388               		.loc 2 270 12 view .LVU107
 389 0010 9FEF      		ldi r25,lo8(-1)
 390               	.LVL31:
 391               	.L29:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 392               		.loc 2 270 12 view .LVU108
 393               	.LBE182:
 394               	.LBE181:
 395               	.LBB183:
 396               	.LBI183:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 397               		.loc 2 358 23 is_stmt 1 view .LVU109
 398               	.LBB184:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 399               		.loc 2 360 5 view .LVU110
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 400               		.loc 2 360 14 is_stmt 0 view .LVU111
 401 0012 8091 E800 		lds r24,232
 402 0016 9150      		subi r25,lo8(-(-1))
 403               	.LVL32:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 404               		.loc 2 360 14 view .LVU112
 405               	.LBE184:
 406               	.LBE183:
 715:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 407               		.loc 1 715 22 view .LVU113
 408 0018 85FD      		sbrc r24,5
 409 001a 00C0      		rjmp .L30
 715:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 410               		.loc 1 715 57 is_stmt 1 view .LVU114
 411               	.LVL33:
 412               	.LBB185:
 413               	.LBI185:
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 414               		.loc 3 255 1 view .LVU115
 415               	.LBB186:
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 416               		.loc 3 257 2 view .LVU116
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 417               		.loc 3 261 2 view .LVU117
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 418               		.loc 3 262 2 view .LVU118
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 419               		.loc 3 263 2 view .LVU119
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 420               		.loc 3 273 3 view .LVU120
 421               		.loc 3 276 2 view .LVU121
 422 001c 85ED      		ldi r24,lo8(-43)
 423 001e 8A95      	1:	dec r24
 424 0020 01F4      		brne 1b
 425 0022 0000      		nop
 426               	.LVL34:
 427               		.loc 3 276 2 is_stmt 0 view .LVU122
 428               	.LBE186:
 429               	.LBE185:
 715:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 430               		.loc 1 715 11 view .LVU123
 431 0024 9111      		cpse r25,__zero_reg__
 432 0026 00C0      		rjmp .L29
 433               	.LVL35:
 434               	.L30:
 716:./tmk_core/protocol/lufa/lufa.c **** 
 435               		.loc 1 716 5 is_stmt 1 view .LVU124
 436               	.LBB187:
 437               	.LBI187:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 438               		.loc 2 358 23 view .LVU125
 439               	.LBB188:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 440               		.loc 2 360 5 view .LVU126
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 441               		.loc 2 360 14 is_stmt 0 view .LVU127
 442 0028 8091 E800 		lds r24,232
 443               	.LBE188:
 444               	.LBE187:
 716:./tmk_core/protocol/lufa/lufa.c **** 
 445               		.loc 1 716 8 view .LVU128
 446 002c 85FF      		sbrs r24,5
 447 002e 00C0      		rjmp .L26
 719:./tmk_core/protocol/lufa/lufa.c **** 
 448               		.loc 1 719 5 is_stmt 1 view .LVU129
 449 0030 50E0      		ldi r21,0
 450 0032 40E0      		ldi r20,0
 451 0034 65E0      		ldi r22,lo8(5)
 452 0036 70E0      		ldi r23,0
 453 0038 C901      		movw r24,r18
 454 003a 0E94 0000 		call Endpoint_Write_Stream_LE
 455               	.LVL36:
 722:./tmk_core/protocol/lufa/lufa.c **** #endif
 456               		.loc 1 722 5 view .LVU130
 457               	.LBB189:
 458               	.LBI189:
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 459               		.loc 2 453 23 view .LVU131
 460               	.LBB190:
 461               		.loc 2 456 6 view .LVU132
 462               		.loc 2 456 13 is_stmt 0 view .LVU133
 463 003e 8091 E800 		lds r24,232
 464 0042 8E77      		andi r24,lo8(126)
 465 0044 8093 E800 		sts 232,r24
 466               	.LVL37:
 467               	.L26:
 468               	/* epilogue start */
 469               		.loc 2 456 13 view .LVU134
 470               	.LBE190:
 471               	.LBE189:
 724:./tmk_core/protocol/lufa/lufa.c **** 
 472               		.loc 1 724 1 view .LVU135
 473 0048 0895      		ret
 474               		.cfi_endproc
 475               	.LFE127:
 477               		.section	.text.send_keyboard,"ax",@progbits
 479               	send_keyboard:
 480               	.LVL38:
 481               	.LFB126:
 627:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 482               		.loc 1 627 1 is_stmt 1 view -0
 483               		.cfi_startproc
 627:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 484               		.loc 1 627 1 is_stmt 0 view .LVU137
 485 0000 CF93      		push r28
 486               	.LCFI8:
 487               		.cfi_def_cfa_offset 3
 488               		.cfi_offset 28, -2
 489 0002 DF93      		push r29
 490               	.LCFI9:
 491               		.cfi_def_cfa_offset 4
 492               		.cfi_offset 29, -3
 493               	/* prologue: function */
 494               	/* frame size = 0 */
 495               	/* stack size = 2 */
 496               	.L__stack_usage = 2
 497 0004 EC01      		movw r28,r24
 635:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 498               		.loc 1 635 5 is_stmt 1 view .LVU138
 499               	.LVL39:
 636:./tmk_core/protocol/lufa/lufa.c **** 
 500               		.loc 1 636 5 view .LVU139
 501               	.LBB191:
 502               	.LBI191:
 603:./tmk_core/protocol/lufa/lufa.c **** #ifdef ADAFRUIT_BLE_ENABLE
 503               		.loc 1 603 23 view .LVU140
 504               	.LBB192:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 505               		.loc 1 619 3 view .LVU141
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 506               		.loc 1 619 68 is_stmt 0 view .LVU142
 507 0006 8091 0000 		lds r24,USB_DeviceState
 508               	.LVL40:
 619:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 509               		.loc 1 619 68 view .LVU143
 510               	.LBE192:
 511               	.LBE191:
 644:./tmk_core/protocol/lufa/lufa.c ****       return;
 512               		.loc 1 644 5 is_stmt 1 view .LVU144
 644:./tmk_core/protocol/lufa/lufa.c ****       return;
 513               		.loc 1 644 8 is_stmt 0 view .LVU145
 514 000a 8430      		cpi r24,lo8(4)
 515 000c 01F4      		brne .L39
 650:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 516               		.loc 1 650 5 is_stmt 1 view .LVU146
 650:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 517               		.loc 1 650 8 is_stmt 0 view .LVU147
 518 000e 9091 0000 		lds r25,keyboard_protocol
 519 0012 9923      		tst r25
 520 0014 01F0      		breq .L42
 650:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 521               		.loc 1 650 27 discriminator 1 view .LVU148
 522 0016 9091 0000 		lds r25,keymap_config
 523 001a 97FF      		sbrs r25,7
 524 001c 00C0      		rjmp .L42
 652:./tmk_core/protocol/lufa/lufa.c **** 
 525               		.loc 1 652 9 is_stmt 1 view .LVU149
 526               	.LVL41:
 527               	.LBB193:
 528               	.LBI193:
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 529               		.loc 2 267 23 view .LVU150
 530               	.LBB194:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 531               		.loc 2 270 6 view .LVU151
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 532               		.loc 2 270 12 is_stmt 0 view .LVU152
 533 001e 8093 E900 		sts 233,r24
 534               	.LVL42:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535               		.loc 2 270 12 view .LVU153
 536 0022 8FEF      		ldi r24,lo8(-1)
 537               	.LVL43:
 538               	.L43:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 539               		.loc 2 270 12 view .LVU154
 540               	.LBE194:
 541               	.LBE193:
 542               	.LBB195:
 543               	.LBI195:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 544               		.loc 2 358 23 is_stmt 1 view .LVU155
 545               	.LBB196:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 546               		.loc 2 360 5 view .LVU156
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 547               		.loc 2 360 14 is_stmt 0 view .LVU157
 548 0024 9091 E800 		lds r25,232
 549 0028 8150      		subi r24,lo8(-(-1))
 550               	.LVL44:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 551               		.loc 2 360 14 view .LVU158
 552               	.LBE196:
 553               	.LBE195:
 655:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 554               		.loc 1 655 26 view .LVU159
 555 002a 95FD      		sbrc r25,5
 556 002c 00C0      		rjmp .L44
 655:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 557               		.loc 1 655 61 is_stmt 1 view .LVU160
 558               	.LVL45:
 559               	.LBB197:
 560               	.LBI197:
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 561               		.loc 3 255 1 view .LVU161
 562               	.LBB198:
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 563               		.loc 3 257 2 view .LVU162
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 564               		.loc 3 261 2 view .LVU163
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 565               		.loc 3 262 2 view .LVU164
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 566               		.loc 3 263 2 view .LVU165
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 567               		.loc 3 273 3 view .LVU166
 568               		.loc 3 276 2 view .LVU167
 569 002e 95E1      		ldi r25,lo8(21)
 570 0030 9A95      	1:	dec r25
 571 0032 01F4      		brne 1b
 572 0034 0000      		nop
 573               	.LVL46:
 574               		.loc 3 276 2 is_stmt 0 view .LVU168
 575               	.LBE198:
 576               	.LBE197:
 655:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 577               		.loc 1 655 15 view .LVU169
 578 0036 8111      		cpse r24,__zero_reg__
 579 0038 00C0      		rjmp .L43
 580               	.LVL47:
 581               	.L44:
 656:./tmk_core/protocol/lufa/lufa.c **** 
 582               		.loc 1 656 9 is_stmt 1 view .LVU170
 583               	.LBB199:
 584               	.LBI199:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 585               		.loc 2 358 23 view .LVU171
 586               	.LBB200:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 587               		.loc 2 360 5 view .LVU172
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 588               		.loc 2 360 14 is_stmt 0 view .LVU173
 589 003a 8091 E800 		lds r24,232
 590               	.LBE200:
 591               	.LBE199:
 659:./tmk_core/protocol/lufa/lufa.c ****     }
 592               		.loc 1 659 9 view .LVU174
 593 003e 50E0      		ldi r21,0
 594 0040 40E0      		ldi r20,0
 595 0042 60E2      		ldi r22,lo8(32)
 596 0044 70E0      		ldi r23,0
 656:./tmk_core/protocol/lufa/lufa.c **** 
 597               		.loc 1 656 12 view .LVU175
 598 0046 85FD      		sbrc r24,5
 599 0048 00C0      		rjmp .L66
 600               	.LVL48:
 601               	.L39:
 602               	/* epilogue start */
 679:./tmk_core/protocol/lufa/lufa.c **** 
 603               		.loc 1 679 1 view .LVU176
 604 004a DF91      		pop r29
 605 004c CF91      		pop r28
 606               	.LVL49:
 679:./tmk_core/protocol/lufa/lufa.c **** 
 607               		.loc 1 679 1 view .LVU177
 608 004e 0895      		ret
 609               	.LVL50:
 610               	.L42:
 665:./tmk_core/protocol/lufa/lufa.c **** 
 611               		.loc 1 665 9 is_stmt 1 view .LVU178
 612               	.LBB201:
 613               	.LBI201:
 267:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 614               		.loc 2 267 23 view .LVU179
 615               	.LBB202:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 616               		.loc 2 270 6 view .LVU180
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 617               		.loc 2 270 12 is_stmt 0 view .LVU181
 618 0050 81E0      		ldi r24,lo8(1)
 619               	.LVL51:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 620               		.loc 2 270 12 view .LVU182
 621 0052 8093 E900 		sts 233,r24
 622               	.LVL52:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 623               		.loc 2 270 12 view .LVU183
 624 0056 8FEF      		ldi r24,lo8(-1)
 625               	.LVL53:
 626               	.L48:
 270:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 627               		.loc 2 270 12 view .LVU184
 628               	.LBE202:
 629               	.LBE201:
 630               	.LBB203:
 631               	.LBI203:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 632               		.loc 2 358 23 is_stmt 1 view .LVU185
 633               	.LBB204:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 634               		.loc 2 360 5 view .LVU186
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 635               		.loc 2 360 14 is_stmt 0 view .LVU187
 636 0058 9091 E800 		lds r25,232
 637 005c 8150      		subi r24,lo8(-(-1))
 638               	.LVL54:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 639               		.loc 2 360 14 view .LVU188
 640               	.LBE204:
 641               	.LBE203:
 668:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642               		.loc 1 668 26 view .LVU189
 643 005e 95FD      		sbrc r25,5
 644 0060 00C0      		rjmp .L49
 668:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 645               		.loc 1 668 61 is_stmt 1 view .LVU190
 646               	.LVL55:
 647               	.LBB205:
 648               	.LBI205:
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 649               		.loc 3 255 1 view .LVU191
 650               	.LBB206:
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 651               		.loc 3 257 2 view .LVU192
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 652               		.loc 3 261 2 view .LVU193
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 653               		.loc 3 262 2 view .LVU194
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 654               		.loc 3 263 2 view .LVU195
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 655               		.loc 3 273 3 view .LVU196
 656               		.loc 3 276 2 view .LVU197
 657 0062 95ED      		ldi r25,lo8(-43)
 658 0064 9A95      	1:	dec r25
 659 0066 01F4      		brne 1b
 660 0068 0000      		nop
 661               	.LVL56:
 662               		.loc 3 276 2 is_stmt 0 view .LVU198
 663               	.LBE206:
 664               	.LBE205:
 668:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 665               		.loc 1 668 15 view .LVU199
 666 006a 8111      		cpse r24,__zero_reg__
 667 006c 00C0      		rjmp .L48
 668               	.LVL57:
 669               	.L49:
 669:./tmk_core/protocol/lufa/lufa.c **** 
 670               		.loc 1 669 9 is_stmt 1 view .LVU200
 671               	.LBB207:
 672               	.LBI207:
 358:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 673               		.loc 2 358 23 view .LVU201
 674               	.LBB208:
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 675               		.loc 2 360 5 view .LVU202
 360:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 676               		.loc 2 360 14 is_stmt 0 view .LVU203
 677 006e 8091 E800 		lds r24,232
 678               	.LBE208:
 679               	.LBE207:
 669:./tmk_core/protocol/lufa/lufa.c **** 
 680               		.loc 1 669 12 view .LVU204
 681 0072 85FF      		sbrs r24,5
 682 0074 00C0      		rjmp .L39
 672:./tmk_core/protocol/lufa/lufa.c ****     }
 683               		.loc 1 672 9 is_stmt 1 view .LVU205
 684 0076 50E0      		ldi r21,0
 685 0078 40E0      		ldi r20,0
 686 007a 68E0      		ldi r22,lo8(8)
 687 007c 70E0      		ldi r23,0
 688               	.LVL58:
 689               	.L66:
 672:./tmk_core/protocol/lufa/lufa.c ****     }
 690               		.loc 1 672 9 is_stmt 0 view .LVU206
 691 007e CE01      		movw r24,r28
 692 0080 0E94 0000 		call Endpoint_Write_Stream_LE
 693               	.LVL59:
 676:./tmk_core/protocol/lufa/lufa.c **** 
 694               		.loc 1 676 5 is_stmt 1 view .LVU207
 695               	.LBB209:
 696               	.LBI209:
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 697               		.loc 2 453 23 view .LVU208
 698               	.LBB210:
 699               		.loc 2 456 6 view .LVU209
 700               		.loc 2 456 13 is_stmt 0 view .LVU210
 701 0084 8091 E800 		lds r24,232
 702 0088 8E77      		andi r24,lo8(126)
 703 008a 8093 E800 		sts 232,r24
 704               	.LBE210:
 705               	.LBE209:
 678:./tmk_core/protocol/lufa/lufa.c **** }
 706               		.loc 1 678 5 is_stmt 1 view .LVU211
 678:./tmk_core/protocol/lufa/lufa.c **** }
 707               		.loc 1 678 26 is_stmt 0 view .LVU212
 708 008e 80E2      		ldi r24,lo8(32)
 709 0090 FE01      		movw r30,r28
 710 0092 A0E0      		ldi r26,lo8(keyboard_report_sent)
 711 0094 B0E0      		ldi r27,hi8(keyboard_report_sent)
 712               		0:
 713 0096 0190      		ld r0,Z+
 714 0098 0D92      		st X+,r0
 715 009a 8A95      		dec r24
 716 009c 01F4      		brne 0b
 717 009e 00C0      		rjmp .L39
 718               		.cfi_endproc
 719               	.LFE126:
 721               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 722               	.global	EVENT_USB_Device_Connect
 724               	EVENT_USB_Device_Connect:
 725               	.LFB117:
 330:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 726               		.loc 1 330 1 is_stmt 1 view -0
 727               		.cfi_startproc
 728               	/* prologue: function */
 729               	/* frame size = 0 */
 730               	/* stack size = 0 */
 731               	.L__stack_usage = 0
 331:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 732               		.loc 1 331 17 view .LVU214
 333:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 733               		.loc 1 333 5 view .LVU215
 333:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 734               		.loc 1 333 9 is_stmt 0 view .LVU216
 735 0000 8091 0000 		lds r24,USB_IsInitialized
 333:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 736               		.loc 1 333 8 view .LVU217
 737 0004 8111      		cpse r24,__zero_reg__
 738 0006 00C0      		rjmp .L67
 334:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 739               		.loc 1 334 9 is_stmt 1 view .LVU218
 740 0008 0E94 0000 		call USB_Disable
 741               	.LVL60:
 335:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 742               		.loc 1 335 9 view .LVU219
 743 000c 0E94 0000 		call USB_Init
 744               	.LVL61:
 336:./tmk_core/protocol/lufa/lufa.c ****     }
 745               		.loc 1 336 9 view .LVU220
 746               	.LBB211:
 747               	.LBI211:
 748               		.file 4 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_RAM_DESCRIPTORS))
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_RAM_DESCRIPTORS are mutually exclusive.
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - please refer to the USB 2.0 specification.
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || \
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      defined(USB_SERIES_4_AVR) || defined(USB_SERIES_2_AVR) || \
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 114:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 115:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 116:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 117:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 118:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 119:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 120:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 121:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 122:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 123:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 124:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 125:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 126:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 127:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 128:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 129:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 130:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 131:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 132:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 133:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 134:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 135:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 136:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 137:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 138:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 139:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 140:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 141:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention This function should only be used if the device has indicated to the host that it
 142:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             supports the Remote Wakeup feature in the device descriptors, and should only be
 143:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             issued if the host is currently allowing remote wakeup events from the device (i.
 144:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOT
 145:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             compile time option is used, this function is unavailable.
 146:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             \n\n
 147:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 148:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention The USB clock must be running for this function to operate. If the stack is initi
 149:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is 
 150:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             before attempting to call this function.
 151:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 153:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 155:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 156:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 157:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 158:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 159:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 160:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 161:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 162:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 163:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 164:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 165:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 166:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 167:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 168:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if !defined(NO_SOF_EVENTS)
 169:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 170:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 171:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 172:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 173:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note This function is not available when the \c NO_SOF_EVENTS compile time token is define
 174:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 175:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 176:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 749               		.loc 4 176 24 view .LVU221
 750               	.LBE211:
 177:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 178:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Enable(USB_INT_SOFI);
 751               		.loc 4 178 6 view .LVU222
 752               	.LBB214:
 753               	.LBB212:
 754               	.LBI212:
 755               		.file 5 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
 756               		.loc 5 88 23 view .LVU223
 757               	.LBB213:
  89:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
 758               		.loc 5 90 5 view .LVU224
  91:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 759               		.loc 5 113 7 view .LVU225
 760               		.loc 5 113 14 is_stmt 0 view .LVU226
 761 0010 8091 E200 		lds r24,226
 762 0014 8460      		ori r24,lo8(4)
 763 0016 8093 E200 		sts 226,r24
 114:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 764               		.loc 5 114 7 is_stmt 1 view .LVU227
 765               	.LVL62:
 766               	.L67:
 767               	/* epilogue start */
 768               		.loc 5 114 7 is_stmt 0 view .LVU228
 769               	.LBE213:
 770               	.LBE212:
 771               	.LBE214:
 338:./tmk_core/protocol/lufa/lufa.c **** 
 772               		.loc 1 338 1 view .LVU229
 773 001a 0895      		ret
 774               		.cfi_endproc
 775               	.LFE117:
 777               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 778               	.global	EVENT_USB_Device_Disconnect
 780               	EVENT_USB_Device_Disconnect:
 781               	.LFB118:
 341:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 782               		.loc 1 341 1 is_stmt 1 view -0
 783               		.cfi_startproc
 784               	/* prologue: function */
 785               	/* frame size = 0 */
 786               	/* stack size = 0 */
 787               	.L__stack_usage = 0
 342:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 788               		.loc 1 342 17 view .LVU231
 344:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 789               		.loc 1 344 5 view .LVU232
 344:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 790               		.loc 1 344 23 is_stmt 0 view .LVU233
 791 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 792               	/* epilogue start */
 352:./tmk_core/protocol/lufa/lufa.c **** 
 793               		.loc 1 352 1 view .LVU234
 794 0004 0895      		ret
 795               		.cfi_endproc
 796               	.LFE118:
 798               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 799               	.global	EVENT_USB_Device_Reset
 801               	EVENT_USB_Device_Reset:
 802               	.LFB135:
 803               		.cfi_startproc
 804               	/* prologue: function */
 805               	/* frame size = 0 */
 806               	/* stack size = 0 */
 807               	.L__stack_usage = 0
 808               	/* epilogue start */
 809 0000 0895      		ret
 810               		.cfi_endproc
 811               	.LFE135:
 813               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 814               	.global	EVENT_USB_Device_Suspend
 816               	EVENT_USB_Device_Suspend:
 817               	.LFB120:
 360:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 818               		.loc 1 360 1 is_stmt 1 view -0
 819               		.cfi_startproc
 820               	/* prologue: function */
 821               	/* frame size = 0 */
 822               	/* stack size = 0 */
 823               	.L__stack_usage = 0
 361:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 824               		.loc 1 361 17 view .LVU236
 825               	/* epilogue start */
 365:./tmk_core/protocol/lufa/lufa.c **** 
 826               		.loc 1 365 1 is_stmt 0 view .LVU237
 827 0000 0895      		ret
 828               		.cfi_endproc
 829               	.LFE120:
 831               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 832               	.global	EVENT_USB_Device_WakeUp
 834               	EVENT_USB_Device_WakeUp:
 835               	.LFB121:
 368:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 836               		.loc 1 368 1 is_stmt 1 view -0
 837               		.cfi_startproc
 838               	/* prologue: function */
 839               	/* frame size = 0 */
 840               	/* stack size = 0 */
 841               	.L__stack_usage = 0
 369:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 842               		.loc 1 369 17 view .LVU239
 370:./tmk_core/protocol/lufa/lufa.c **** 
 843               		.loc 1 370 5 view .LVU240
 844 0000 0C94 0000 		jmp suspend_wakeup_init
 845               	.LVL63:
 846               		.cfi_endproc
 847               	.LFE121:
 849               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 850               	.global	EVENT_USB_Device_ConfigurationChanged
 852               	EVENT_USB_Device_ConfigurationChanged:
 853               	.LFB122:
 410:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 854               		.loc 1 410 1 view -0
 855               		.cfi_startproc
 856               	/* prologue: function */
 857               	/* frame size = 0 */
 858               	/* stack size = 0 */
 859               	.L__stack_usage = 0
 411:./tmk_core/protocol/lufa/lufa.c **** 
 860               		.loc 1 411 5 view .LVU242
 861               	.LVL64:
 414:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 862               		.loc 1 414 5 view .LVU243
 863               	.LBB215:
 864               	.LBI215:
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 865               		.loc 2 200 23 view .LVU244
 866               	.LBB216:
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 867               		.loc 2 205 5 view .LVU245
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 868               		.loc 2 207 5 view .LVU246
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 869               		.loc 2 210 5 view .LVU247
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 870               		.loc 2 210 5 is_stmt 0 view .LVU248
 871               	.LBE216:
 872               	.LBE215:
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 873               		.loc 2 97 5 is_stmt 1 view .LVU249
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 874               		.loc 2 98 5 view .LVU250
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 875               		.loc 2 100 5 view .LVU251
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 876               		.loc 2 106 5 view .LVU252
 877               	.LBB218:
 878               	.LBB217:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 879               		.loc 2 210 12 is_stmt 0 view .LVU253
 880 0000 42E0      		ldi r20,lo8(2)
 881 0002 61EC      		ldi r22,lo8(-63)
 882 0004 81E0      		ldi r24,lo8(1)
 883 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 884               	.LVL65:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 885               		.loc 2 210 12 view .LVU254
 886               	.LBE217:
 887               	.LBE218:
 419:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 888               		.loc 1 419 5 is_stmt 1 view .LVU255
 889               	.LBB219:
 890               	.LBI219:
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 891               		.loc 2 200 23 view .LVU256
 892               	.LBB220:
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 893               		.loc 2 205 5 view .LVU257
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 894               		.loc 2 207 5 view .LVU258
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 895               		.loc 2 210 5 view .LVU259
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 896               		.loc 2 210 5 is_stmt 0 view .LVU260
 897               	.LBE220:
 898               	.LBE219:
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 899               		.loc 2 97 5 is_stmt 1 view .LVU261
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 900               		.loc 2 98 5 view .LVU262
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 901               		.loc 2 100 5 view .LVU263
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 902               		.loc 2 106 5 view .LVU264
 903               	.LBB222:
 904               	.LBB221:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 905               		.loc 2 210 12 is_stmt 0 view .LVU265
 906 000a 42E0      		ldi r20,lo8(2)
 907 000c 61EC      		ldi r22,lo8(-63)
 908 000e 82E0      		ldi r24,lo8(2)
 909 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 910               	.LVL66:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 911               		.loc 2 210 12 view .LVU266
 912               	.LBE221:
 913               	.LBE222:
 425:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 914               		.loc 1 425 5 is_stmt 1 view .LVU267
 915               	.LBB223:
 916               	.LBI223:
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 917               		.loc 2 200 23 view .LVU268
 918               	.LBB224:
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 919               		.loc 2 205 5 view .LVU269
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 920               		.loc 2 207 5 view .LVU270
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 921               		.loc 2 210 5 view .LVU271
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 922               		.loc 2 210 5 is_stmt 0 view .LVU272
 923               	.LBE224:
 924               	.LBE223:
  97:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 925               		.loc 2 97 5 is_stmt 1 view .LVU273
  98:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 926               		.loc 2 98 5 view .LVU274
 100:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 927               		.loc 2 100 5 view .LVU275
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 928               		.loc 2 106 5 view .LVU276
 929               	.LBB226:
 930               	.LBB225:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 931               		.loc 2 210 12 is_stmt 0 view .LVU277
 932 0014 42E0      		ldi r20,lo8(2)
 933 0016 61EC      		ldi r22,lo8(-63)
 934 0018 83E0      		ldi r24,lo8(3)
 935 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 936               	.LVL67:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 937               		.loc 2 210 12 view .LVU278
 938               	.LBE225:
 939               	.LBE226:
 449:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 940               		.loc 1 449 5 is_stmt 1 view .LVU279
 941               	.LBB227:
 942               	.LBI227:
 200:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 943               		.loc 2 200 23 view .LVU280
 944               	.LBB228:
 205:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 945               		.loc 2 205 5 view .LVU281
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 946               		.loc 2 207 5 view .LVU282
 207:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 947               		.loc 2 207 5 is_stmt 0 view .LVU283
 948               	.LBE228:
 949               	.LBE227:
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 950               		.loc 2 102 6 is_stmt 1 view .LVU284
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 951               		.loc 2 103 6 view .LVU285
 102:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 952               		.loc 2 102 6 view .LVU286
 103:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 953               		.loc 2 103 6 view .LVU287
 106:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 954               		.loc 2 106 5 view .LVU288
 955               	.LBB230:
 956               	.LBB229:
 210:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 957               		.loc 2 210 12 is_stmt 0 view .LVU289
 958 001e 42E2      		ldi r20,lo8(34)
 959 0020 61EC      		ldi r22,lo8(-63)
 960 0022 84E0      		ldi r24,lo8(4)
 961 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 962               	.LVL68:
 963               	.LBE229:
 964               	.LBE230:
 965               		.cfi_endproc
 966               	.LFE122:
 968               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 969               	.global	EVENT_USB_Device_ControlRequest
 971               	EVENT_USB_Device_ControlRequest:
 972               	.LFB123:
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 973               		.loc 1 482 1 is_stmt 1 view -0
 974               		.cfi_startproc
 975               	/* prologue: function */
 976               	/* frame size = 0 */
 977               	/* stack size = 0 */
 978               	.L__stack_usage = 0
 483:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 979               		.loc 1 483 5 view .LVU291
 980               	.LVL69:
 484:./tmk_core/protocol/lufa/lufa.c **** 
 981               		.loc 1 484 5 view .LVU292
 487:./tmk_core/protocol/lufa/lufa.c ****     {
 982               		.loc 1 487 5 view .LVU293
 487:./tmk_core/protocol/lufa/lufa.c ****     {
 983               		.loc 1 487 31 is_stmt 0 view .LVU294
 984 0000 8091 0000 		lds r24,USB_ControlRequest+1
 487:./tmk_core/protocol/lufa/lufa.c ****     {
 985               		.loc 1 487 5 view .LVU295
 986 0004 8330      		cpi r24,lo8(3)
 987 0006 01F4      		brne .+2
 988 0008 00C0      		rjmp .L75
 989 000a 00F4      		brsh .L76
 990 000c 8130      		cpi r24,lo8(1)
 991 000e 01F0      		breq .L77
 992 0010 8230      		cpi r24,lo8(2)
 993 0012 01F4      		brne .+2
 994 0014 00C0      		rjmp .L78
 995 0016 0895      		ret
 996               	.L76:
 997 0018 8A30      		cpi r24,lo8(10)
 998 001a 01F4      		brne .+2
 999 001c 00C0      		rjmp .L80
 1000 001e 8B30      		cpi r24,lo8(11)
 1001 0020 01F4      		brne .+2
 1002 0022 00C0      		rjmp .L81
 1003 0024 8930      		cpi r24,lo8(9)
 1004 0026 01F0      		breq .+2
 1005 0028 00C0      		rjmp .L74
 510:./tmk_core/protocol/lufa/lufa.c ****             {
 1006               		.loc 1 510 13 is_stmt 1 view .LVU296
 510:./tmk_core/protocol/lufa/lufa.c ****             {
 1007               		.loc 1 510 16 is_stmt 0 view .LVU297
 1008 002a 8091 0000 		lds r24,USB_ControlRequest
 1009 002e 8132      		cpi r24,lo8(33)
 1010 0030 01F0      		breq .+2
 1011 0032 00C0      		rjmp .L74
 514:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1012               		.loc 1 514 17 is_stmt 1 view .LVU298
 514:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1013               		.loc 1 514 43 is_stmt 0 view .LVU299
 1014 0034 8091 0000 		lds r24,USB_ControlRequest+4
 1015 0038 9091 0000 		lds r25,USB_ControlRequest+4+1
 1016 003c 0097      		sbiw r24,0
 1017 003e 01F0      		breq .L86
 1018 0040 0397      		sbiw r24,3
 1019 0042 01F4      		brne .L74
 1020               	.L86:
 519:./tmk_core/protocol/lufa/lufa.c **** 
 1021               		.loc 1 519 21 is_stmt 1 view .LVU300
 1022               	.LBB231:
 1023               	.LBI231:
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1024               		.loc 2 442 23 view .LVU301
 1025               	.LBB232:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1026               		.loc 2 444 5 view .LVU302
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1027               		.loc 2 444 12 is_stmt 0 view .LVU303
 1028 0044 8091 E800 		lds r24,232
 1029 0048 877F      		andi r24,lo8(-9)
 1030 004a 8093 E800 		sts 232,r24
 1031               	.L87:
 1032               	.LBE232:
 1033               	.LBE231:
 1034               	.LBB233:
 1035               	.LBI233:
 417:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1036               		.loc 2 417 23 is_stmt 1 view .LVU304
 1037               	.LBB234:
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1038               		.loc 2 419 5 view .LVU305
 419:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1039               		.loc 2 419 14 is_stmt 0 view .LVU306
 1040 004e 8091 E800 		lds r24,232
 1041               	.LBE234:
 1042               	.LBE233:
 521:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1043               		.loc 1 521 27 view .LVU307
 1044 0052 82FF      		sbrs r24,2
 1045 0054 00C0      		rjmp .L88
 525:./tmk_core/protocol/lufa/lufa.c **** 
 1046               		.loc 1 525 21 is_stmt 1 view .LVU308
 1047               	.LBB235:
 1048               	.LBI235:
 457:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 1049               		.loc 2 540 26 view .LVU309
 1050               	.LBB236:
 541:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 1051               		.loc 2 542 5 view .LVU310
 1052               		.loc 2 542 12 is_stmt 0 view .LVU311
 1053 0056 8091 F100 		lds r24,241
 1054               	.LBE236:
 1055               	.LBE235:
 525:./tmk_core/protocol/lufa/lufa.c **** 
 1056               		.loc 1 525 40 view .LVU312
 1057 005a 8093 0000 		sts keyboard_led_stats,r24
 527:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 1058               		.loc 1 527 21 is_stmt 1 view .LVU313
 1059               	.LBB237:
 1060               	.LBI237:
 468:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1061               		.loc 2 468 23 view .LVU314
 1062               	.LBB238:
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1063               		.loc 2 471 6 view .LVU315
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1064               		.loc 2 471 13 is_stmt 0 view .LVU316
 1065 005e 8091 E800 		lds r24,232
 1066 0062 8B77      		andi r24,lo8(123)
 1067               	.L102:
 1068               	.LBE238:
 1069               	.LBE237:
 1070               	.LBB239:
 1071               	.LBB240:
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1072               		.loc 2 456 13 view .LVU317
 1073 0064 8093 E800 		sts 232,r24
 1074               	.LBE240:
 1075               	.LBE239:
 579:./tmk_core/protocol/lufa/lufa.c ****             }
 1076               		.loc 1 579 17 is_stmt 1 view .LVU318
 1077 0068 0C94 0000 		jmp Endpoint_ClearStatusStage
 1078               	.LVL70:
 1079               	.L77:
 490:./tmk_core/protocol/lufa/lufa.c ****             {
 1080               		.loc 1 490 13 view .LVU319
 490:./tmk_core/protocol/lufa/lufa.c ****             {
 1081               		.loc 1 490 16 is_stmt 0 view .LVU320
 1082 006c 8091 0000 		lds r24,USB_ControlRequest
 1083 0070 813A      		cpi r24,lo8(-95)
 1084 0072 01F4      		brne .L74
 492:./tmk_core/protocol/lufa/lufa.c **** 
 1085               		.loc 1 492 17 is_stmt 1 view .LVU321
 1086               	.LBB242:
 1087               	.LBI242:
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1088               		.loc 2 442 23 view .LVU322
 1089               	.LBB243:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1090               		.loc 2 444 5 view .LVU323
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1091               		.loc 2 444 12 is_stmt 0 view .LVU324
 1092 0074 8091 E800 		lds r24,232
 1093 0078 877F      		andi r24,lo8(-9)
 1094 007a 8093 E800 		sts 232,r24
 1095               	.LBE243:
 1096               	.LBE242:
 495:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1097               		.loc 1 495 17 is_stmt 1 view .LVU325
 1098 007e 8091 0000 		lds r24,USB_ControlRequest+4
 1099 0082 9091 0000 		lds r25,USB_ControlRequest+4+1
 1100 0086 892B      		or r24,r25
 1101 0088 01F4      		brne .L91
 499:./tmk_core/protocol/lufa/lufa.c ****                     break;
 1102               		.loc 1 499 32 is_stmt 0 view .LVU326
 1103 008a 60E2      		ldi r22,lo8(32)
 498:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 1104               		.loc 1 498 32 view .LVU327
 1105 008c 80E0      		ldi r24,lo8(keyboard_report_sent)
 1106 008e 90E0      		ldi r25,hi8(keyboard_report_sent)
 1107               	.L84:
 1108               	.LVL71:
 504:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1109               		.loc 1 504 17 is_stmt 1 view .LVU328
 1110 0090 70E0      		ldi r23,0
 1111 0092 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1112               	.LVL72:
 505:./tmk_core/protocol/lufa/lufa.c ****             }
 1113               		.loc 1 505 17 view .LVU329
 1114               	.LBB244:
 1115               	.LBI244:
 468:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1116               		.loc 2 468 23 view .LVU330
 1117               	.LBB245:
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1118               		.loc 2 471 6 view .LVU331
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1119               		.loc 2 471 13 is_stmt 0 view .LVU332
 1120 0096 8091 E800 		lds r24,232
 1121 009a 8B77      		andi r24,lo8(123)
 1122 009c 8093 E800 		sts 232,r24
 1123 00a0 0895      		ret
 1124               	.LVL73:
 1125               	.L91:
 471:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1126               		.loc 2 471 13 view .LVU333
 1127               	.LBE245:
 1128               	.LBE244:
 484:./tmk_core/protocol/lufa/lufa.c **** 
 1129               		.loc 1 484 14 view .LVU334
 1130 00a2 60E0      		ldi r22,0
 483:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1131               		.loc 1 483 14 view .LVU335
 1132 00a4 90E0      		ldi r25,0
 1133 00a6 80E0      		ldi r24,0
 1134 00a8 00C0      		rjmp .L84
 1135               	.L88:
 522:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1136               		.loc 1 522 25 is_stmt 1 view .LVU336
 522:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1137               		.loc 1 522 45 is_stmt 0 view .LVU337
 1138 00aa 8091 0000 		lds r24,USB_DeviceState
 522:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1139               		.loc 1 522 28 view .LVU338
 1140 00ae 8111      		cpse r24,__zero_reg__
 1141 00b0 00C0      		rjmp .L87
 1142               	.L74:
 1143               	/* epilogue start */
 588:./tmk_core/protocol/lufa/lufa.c **** 
 1144               		.loc 1 588 1 view .LVU339
 1145 00b2 0895      		ret
 1146               	.L75:
 537:./tmk_core/protocol/lufa/lufa.c ****             {
 1147               		.loc 1 537 13 is_stmt 1 view .LVU340
 537:./tmk_core/protocol/lufa/lufa.c ****             {
 1148               		.loc 1 537 16 is_stmt 0 view .LVU341
 1149 00b4 8091 0000 		lds r24,USB_ControlRequest
 1150 00b8 813A      		cpi r24,lo8(-95)
 1151 00ba 01F4      		brne .L74
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1152               		.loc 1 539 17 is_stmt 1 view .LVU342
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1153               		.loc 1 539 20 is_stmt 0 view .LVU343
 1154 00bc 8091 0000 		lds r24,USB_ControlRequest+4
 1155 00c0 9091 0000 		lds r25,USB_ControlRequest+4+1
 1156 00c4 892B      		or r24,r25
 1157 00c6 01F4      		brne .L74
 540:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 1158               		.loc 1 540 21 is_stmt 1 view .LVU344
 1159               	.LBB246:
 1160               	.LBI246:
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1161               		.loc 2 442 23 view .LVU345
 1162               	.LBB247:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1163               		.loc 2 444 5 view .LVU346
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1164               		.loc 2 444 12 is_stmt 0 view .LVU347
 1165 00c8 8091 E800 		lds r24,232
 1166 00cc 877F      		andi r24,lo8(-9)
 1167 00ce 8093 E800 		sts 232,r24
 1168               	.L89:
 1169               	.LBE247:
 1170               	.LBE246:
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1171               		.loc 1 541 52 is_stmt 1 discriminator 1 view .LVU348
 1172               	.LBB248:
 1173               	.LBI248:
 405:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1174               		.loc 2 405 23 discriminator 1 view .LVU349
 1175               	.LBB249:
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1176               		.loc 2 407 5 discriminator 1 view .LVU350
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1177               		.loc 2 407 14 is_stmt 0 discriminator 1 view .LVU351
 1178 00d2 8091 E800 		lds r24,232
 1179               	.LBE249:
 1180               	.LBE248:
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1181               		.loc 1 541 27 discriminator 1 view .LVU352
 1182 00d6 80FF      		sbrs r24,0
 1183 00d8 00C0      		rjmp .L89
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1184               		.loc 1 542 21 is_stmt 1 view .LVU353
 1185 00da 8091 0000 		lds r24,keyboard_protocol
 1186               	.LVL74:
 1187               	.LBB250:
 1188               	.LBI250:
 543:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 1189               		.loc 2 552 23 view .LVU354
 1190               	.LBB251:
 553:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 1191               		.loc 2 554 5 view .LVU355
 1192               	.L103:
 1193               		.loc 2 554 5 is_stmt 0 view .LVU356
 1194               	.LBE251:
 1195               	.LBE250:
 1196               	.LBB252:
 1197               	.LBI252:
 552:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1198               		.loc 2 552 23 is_stmt 1 view .LVU357
 1199               	.LBB253:
 1200               		.loc 2 554 5 view .LVU358
 1201               		.loc 2 554 12 is_stmt 0 view .LVU359
 1202 00de 8093 F100 		sts 241,r24
 1203               	.LVL75:
 1204               		.loc 2 554 12 view .LVU360
 1205               	.LBE253:
 1206               	.LBE252:
 578:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1207               		.loc 1 578 17 is_stmt 1 view .LVU361
 1208               	.LBB254:
 1209               	.LBI239:
 453:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1210               		.loc 2 453 23 view .LVU362
 1211               	.LBB241:
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1212               		.loc 2 456 6 view .LVU363
 456:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1213               		.loc 2 456 13 is_stmt 0 view .LVU364
 1214 00e2 8091 E800 		lds r24,232
 1215 00e6 8E77      		andi r24,lo8(126)
 1216 00e8 00C0      		rjmp .L102
 1217               	.L81:
 1218               	.LBE241:
 1219               	.LBE254:
 550:./tmk_core/protocol/lufa/lufa.c ****             {
 1220               		.loc 1 550 13 is_stmt 1 view .LVU365
 550:./tmk_core/protocol/lufa/lufa.c ****             {
 1221               		.loc 1 550 16 is_stmt 0 view .LVU366
 1222 00ea 8091 0000 		lds r24,USB_ControlRequest
 1223 00ee 8132      		cpi r24,lo8(33)
 1224 00f0 01F4      		brne .L74
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1225               		.loc 1 552 17 is_stmt 1 view .LVU367
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1226               		.loc 1 552 20 is_stmt 0 view .LVU368
 1227 00f2 8091 0000 		lds r24,USB_ControlRequest+4
 1228 00f6 9091 0000 		lds r25,USB_ControlRequest+4+1
 1229 00fa 892B      		or r24,r25
 1230 00fc 01F4      		brne .L74
 553:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 1231               		.loc 1 553 21 is_stmt 1 view .LVU369
 1232               	.LBB255:
 1233               	.LBI255:
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1234               		.loc 2 442 23 view .LVU370
 1235               	.LBB256:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1236               		.loc 2 444 5 view .LVU371
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1237               		.loc 2 444 12 is_stmt 0 view .LVU372
 1238 00fe 8091 E800 		lds r24,232
 1239 0102 877F      		andi r24,lo8(-9)
 1240 0104 8093 E800 		sts 232,r24
 1241               	.LBE256:
 1242               	.LBE255:
 554:./tmk_core/protocol/lufa/lufa.c **** 
 1243               		.loc 1 554 21 is_stmt 1 view .LVU373
 1244 0108 0E94 0000 		call Endpoint_ClearStatusStage
 1245               	.LVL76:
 556:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1246               		.loc 1 556 21 view .LVU374
 556:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1247               		.loc 1 556 39 is_stmt 0 view .LVU375
 1248 010c 8091 0000 		lds r24,USB_ControlRequest+2
 1249 0110 8093 0000 		sts keyboard_protocol,r24
 557:./tmk_core/protocol/lufa/lufa.c ****                 }
 1250               		.loc 1 557 21 is_stmt 1 view .LVU376
 1251 0114 0C94 0000 		jmp clear_keyboard
 1252               	.LVL77:
 1253               	.L80:
 563:./tmk_core/protocol/lufa/lufa.c ****             {
 1254               		.loc 1 563 13 view .LVU377
 563:./tmk_core/protocol/lufa/lufa.c ****             {
 1255               		.loc 1 563 16 is_stmt 0 view .LVU378
 1256 0118 8091 0000 		lds r24,USB_ControlRequest
 1257 011c 8132      		cpi r24,lo8(33)
 1258 011e 01F4      		brne .L74
 565:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1259               		.loc 1 565 17 is_stmt 1 view .LVU379
 1260               	.LBB257:
 1261               	.LBI257:
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1262               		.loc 2 442 23 view .LVU380
 1263               	.LBB258:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1264               		.loc 2 444 5 view .LVU381
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1265               		.loc 2 444 12 is_stmt 0 view .LVU382
 1266 0120 8091 E800 		lds r24,232
 1267 0124 877F      		andi r24,lo8(-9)
 1268 0126 8093 E800 		sts 232,r24
 1269               	.LBE258:
 1270               	.LBE257:
 566:./tmk_core/protocol/lufa/lufa.c **** 
 1271               		.loc 1 566 17 is_stmt 1 view .LVU383
 1272 012a 0E94 0000 		call Endpoint_ClearStatusStage
 1273               	.LVL78:
 568:./tmk_core/protocol/lufa/lufa.c ****             }
 1274               		.loc 1 568 17 view .LVU384
 568:./tmk_core/protocol/lufa/lufa.c ****             }
 1275               		.loc 1 568 71 is_stmt 0 view .LVU385
 1276 012e 8091 0000 		lds r24,USB_ControlRequest+3
 568:./tmk_core/protocol/lufa/lufa.c ****             }
 1277               		.loc 1 568 31 view .LVU386
 1278 0132 8093 0000 		sts keyboard_idle,r24
 1279 0136 0895      		ret
 1280               	.L78:
 573:./tmk_core/protocol/lufa/lufa.c ****             {
 1281               		.loc 1 573 13 is_stmt 1 view .LVU387
 573:./tmk_core/protocol/lufa/lufa.c ****             {
 1282               		.loc 1 573 16 is_stmt 0 view .LVU388
 1283 0138 8091 0000 		lds r24,USB_ControlRequest
 1284 013c 813A      		cpi r24,lo8(-95)
 1285 013e 01F0      		breq .+2
 1286 0140 00C0      		rjmp .L74
 575:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 1287               		.loc 1 575 17 is_stmt 1 view .LVU389
 1288               	.LBB259:
 1289               	.LBI259:
 442:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1290               		.loc 2 442 23 view .LVU390
 1291               	.LBB260:
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1292               		.loc 2 444 5 view .LVU391
 444:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1293               		.loc 2 444 12 is_stmt 0 view .LVU392
 1294 0142 8091 E800 		lds r24,232
 1295 0146 877F      		andi r24,lo8(-9)
 1296 0148 8093 E800 		sts 232,r24
 1297               	.L90:
 1298               	.LBE260:
 1299               	.LBE259:
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1300               		.loc 1 576 48 is_stmt 1 discriminator 1 view .LVU393
 1301               	.LBB261:
 1302               	.LBI261:
 405:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1303               		.loc 2 405 23 discriminator 1 view .LVU394
 1304               	.LBB262:
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1305               		.loc 2 407 5 discriminator 1 view .LVU395
 407:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1306               		.loc 2 407 14 is_stmt 0 discriminator 1 view .LVU396
 1307 014c 8091 E800 		lds r24,232
 1308               	.LBE262:
 1309               	.LBE261:
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1310               		.loc 1 576 23 discriminator 1 view .LVU397
 1311 0150 80FF      		sbrs r24,0
 1312 0152 00C0      		rjmp .L90
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1313               		.loc 1 577 17 is_stmt 1 view .LVU398
 1314 0154 8091 0000 		lds r24,keyboard_idle
 1315 0158 00C0      		rjmp .L103
 1316               		.cfi_endproc
 1317               	.LFE123:
 1319               		.section	.text.sendchar,"ax",@progbits
 1320               	.global	sendchar
 1322               	sendchar:
 1323               	.LVL79:
 1324               	.LFB130:
 791:./tmk_core/protocol/lufa/lufa.c **** 
 792:./tmk_core/protocol/lufa/lufa.c **** 
 793:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 794:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 795:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 796:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 797:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 798:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 799:./tmk_core/protocol/lufa/lufa.c **** {
 800:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 801:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 802:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 803:./tmk_core/protocol/lufa/lufa.c **** 
 804:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 805:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 806:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 807:./tmk_core/protocol/lufa/lufa.c **** 
 808:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 809:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 810:./tmk_core/protocol/lufa/lufa.c **** 
 811:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 812:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 813:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 814:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 815:./tmk_core/protocol/lufa/lufa.c ****     }
 816:./tmk_core/protocol/lufa/lufa.c **** 
 817:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 818:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 819:./tmk_core/protocol/lufa/lufa.c ****     }
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 822:./tmk_core/protocol/lufa/lufa.c **** 
 823:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 824:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 825:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 826:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 827:./tmk_core/protocol/lufa/lufa.c ****         }
 828:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 829:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 830:./tmk_core/protocol/lufa/lufa.c ****         }
 831:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 832:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 833:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 834:./tmk_core/protocol/lufa/lufa.c ****         }
 835:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 836:./tmk_core/protocol/lufa/lufa.c ****     }
 837:./tmk_core/protocol/lufa/lufa.c **** 
 838:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 839:./tmk_core/protocol/lufa/lufa.c **** 
 840:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 841:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 842:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 843:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 844:./tmk_core/protocol/lufa/lufa.c ****     } else {
 845:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 849:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 850:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 851:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 852:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 853:./tmk_core/protocol/lufa/lufa.c **** }
 854:./tmk_core/protocol/lufa/lufa.c **** #else
 855:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 856:./tmk_core/protocol/lufa/lufa.c **** {
 1325               		.loc 1 856 1 view -0
 1326               		.cfi_startproc
 1327               	/* prologue: function */
 1328               	/* frame size = 0 */
 1329               	/* stack size = 0 */
 1330               	.L__stack_usage = 0
 857:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 1331               		.loc 1 857 5 view .LVU400
 858:./tmk_core/protocol/lufa/lufa.c **** }
 1332               		.loc 1 858 1 is_stmt 0 view .LVU401
 1333 0000 80E0      		ldi r24,0
 1334               	.LVL80:
 1335               	/* epilogue start */
 1336               		.loc 1 858 1 view .LVU402
 1337 0002 0895      		ret
 1338               		.cfi_endproc
 1339               	.LFE130:
 1341               		.section	.text.startup.main,"ax",@progbits
 1342               		.weak	main
 1344               	main:
 1345               	.LFB133:
 859:./tmk_core/protocol/lufa/lufa.c **** #endif
 860:./tmk_core/protocol/lufa/lufa.c **** 
 861:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 862:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 863:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 864:./tmk_core/protocol/lufa/lufa.c **** 
 865:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 866:./tmk_core/protocol/lufa/lufa.c **** static void usb_send_func(MidiDevice * device, uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t 
 867:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 868:./tmk_core/protocol/lufa/lufa.c ****   event.Data1 = byte0;
 869:./tmk_core/protocol/lufa/lufa.c ****   event.Data2 = byte1;
 870:./tmk_core/protocol/lufa/lufa.c ****   event.Data3 = byte2;
 871:./tmk_core/protocol/lufa/lufa.c **** 
 872:./tmk_core/protocol/lufa/lufa.c ****   uint8_t cable = 0;
 873:./tmk_core/protocol/lufa/lufa.c **** 
 874:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPNUM);
 875:./tmk_core/protocol/lufa/lufa.c **** 
 876:./tmk_core/protocol/lufa/lufa.c ****   //if the length is undefined we assume it is a SYSEX message
 877:./tmk_core/protocol/lufa/lufa.c ****   if (midi_packet_length(byte0) == UNDEFINED) {
 878:./tmk_core/protocol/lufa/lufa.c ****     switch(cnt) {
 879:./tmk_core/protocol/lufa/lufa.c ****       case 3:
 880:./tmk_core/protocol/lufa/lufa.c ****         if (byte2 == SYSEX_END)
 881:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_3);
 882:./tmk_core/protocol/lufa/lufa.c ****         else
 883:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 884:./tmk_core/protocol/lufa/lufa.c ****         break;
 885:./tmk_core/protocol/lufa/lufa.c ****       case 2:
 886:./tmk_core/protocol/lufa/lufa.c ****         if (byte1 == SYSEX_END)
 887:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_2);
 888:./tmk_core/protocol/lufa/lufa.c ****         else
 889:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 890:./tmk_core/protocol/lufa/lufa.c ****         break;
 891:./tmk_core/protocol/lufa/lufa.c ****       case 1:
 892:./tmk_core/protocol/lufa/lufa.c ****         if (byte0 == SYSEX_END)
 893:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_ENDS_IN_1);
 894:./tmk_core/protocol/lufa/lufa.c ****         else
 895:./tmk_core/protocol/lufa/lufa.c ****           event.Event = MIDI_EVENT(cable, SYSEX_START_OR_CONT);
 896:./tmk_core/protocol/lufa/lufa.c ****         break;
 897:./tmk_core/protocol/lufa/lufa.c ****       default:
 898:./tmk_core/protocol/lufa/lufa.c ****         return; //invalid cnt
 899:./tmk_core/protocol/lufa/lufa.c ****     }
 900:./tmk_core/protocol/lufa/lufa.c ****   } else {
 901:./tmk_core/protocol/lufa/lufa.c ****     //deal with 'system common' messages
 902:./tmk_core/protocol/lufa/lufa.c ****     //TODO are there any more?
 903:./tmk_core/protocol/lufa/lufa.c ****     switch(byte0 & 0xF0){
 904:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGPOSITION:
 905:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_3);
 906:./tmk_core/protocol/lufa/lufa.c ****         break;
 907:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_SONGSELECT:
 908:./tmk_core/protocol/lufa/lufa.c ****       case MIDI_TC_QUARTERFRAME:
 909:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, SYS_COMMON_2);
 910:./tmk_core/protocol/lufa/lufa.c ****         break;
 911:./tmk_core/protocol/lufa/lufa.c ****       default:
 912:./tmk_core/protocol/lufa/lufa.c ****         event.Event = MIDI_EVENT(cable, byte0);
 913:./tmk_core/protocol/lufa/lufa.c ****         break;
 914:./tmk_core/protocol/lufa/lufa.c ****     }
 915:./tmk_core/protocol/lufa/lufa.c ****   }
 916:./tmk_core/protocol/lufa/lufa.c **** 
 917:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_Write_Stream_LE(&event, sizeof(event), NULL);
 918:./tmk_core/protocol/lufa/lufa.c **** // Endpoint_ClearIN();
 919:./tmk_core/protocol/lufa/lufa.c **** 
 920:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, &event);
 921:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_Flush(&USB_MIDI_Interface);
 922:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 923:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 924:./tmk_core/protocol/lufa/lufa.c **** }
 925:./tmk_core/protocol/lufa/lufa.c **** 
 926:./tmk_core/protocol/lufa/lufa.c **** static void usb_get_midi(MidiDevice * device) {
 927:./tmk_core/protocol/lufa/lufa.c ****   MIDI_EventPacket_t event;
 928:./tmk_core/protocol/lufa/lufa.c ****   while (MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, &event)) {
 929:./tmk_core/protocol/lufa/lufa.c **** 
 930:./tmk_core/protocol/lufa/lufa.c ****     midi_packet_length_t length = midi_packet_length(event.Data1);
 931:./tmk_core/protocol/lufa/lufa.c ****     uint8_t input[3];
 932:./tmk_core/protocol/lufa/lufa.c ****     input[0] = event.Data1;
 933:./tmk_core/protocol/lufa/lufa.c ****     input[1] = event.Data2;
 934:./tmk_core/protocol/lufa/lufa.c ****     input[2] = event.Data3;
 935:./tmk_core/protocol/lufa/lufa.c ****     if (length == UNDEFINED) {
 936:./tmk_core/protocol/lufa/lufa.c ****       //sysex
 937:./tmk_core/protocol/lufa/lufa.c ****       if (event.Event == MIDI_EVENT(0, SYSEX_START_OR_CONT) || event.Event == MIDI_EVENT(0, SYSEX_E
 938:./tmk_core/protocol/lufa/lufa.c ****         length = 3;
 939:./tmk_core/protocol/lufa/lufa.c ****       } else if (event.Event == MIDI_EVENT(0, SYSEX_ENDS_IN_2)) {
 940:./tmk_core/protocol/lufa/lufa.c ****         length = 2;
 941:./tmk_core/protocol/lufa/lufa.c ****       } else if(event.Event ==  MIDI_EVENT(0, SYSEX_ENDS_IN_1)) {
 942:./tmk_core/protocol/lufa/lufa.c ****         length = 1;
 943:./tmk_core/protocol/lufa/lufa.c ****       } else {
 944:./tmk_core/protocol/lufa/lufa.c ****         //XXX what to do?
 945:./tmk_core/protocol/lufa/lufa.c ****       }
 946:./tmk_core/protocol/lufa/lufa.c ****     }
 947:./tmk_core/protocol/lufa/lufa.c **** 
 948:./tmk_core/protocol/lufa/lufa.c ****     //pass the data to the device input function
 949:./tmk_core/protocol/lufa/lufa.c ****     if (length != UNDEFINED)
 950:./tmk_core/protocol/lufa/lufa.c ****       midi_device_input(device, length, input);
 951:./tmk_core/protocol/lufa/lufa.c ****   }
 952:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_USBTask(&USB_MIDI_Interface);
 953:./tmk_core/protocol/lufa/lufa.c ****   USB_USBTask();
 954:./tmk_core/protocol/lufa/lufa.c **** }
 955:./tmk_core/protocol/lufa/lufa.c **** 
 956:./tmk_core/protocol/lufa/lufa.c **** static void midi_usb_init(MidiDevice * device){
 957:./tmk_core/protocol/lufa/lufa.c ****   midi_device_init(device);
 958:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_send_func(device, usb_send_func);
 959:./tmk_core/protocol/lufa/lufa.c ****   midi_device_set_pre_input_process_func(device, usb_get_midi);
 960:./tmk_core/protocol/lufa/lufa.c **** 
 961:./tmk_core/protocol/lufa/lufa.c ****   // SetupHardware();
 962:./tmk_core/protocol/lufa/lufa.c ****   sei();
 963:./tmk_core/protocol/lufa/lufa.c **** }
 964:./tmk_core/protocol/lufa/lufa.c **** 
 965:./tmk_core/protocol/lufa/lufa.c **** void MIDI_Task(void)
 966:./tmk_core/protocol/lufa/lufa.c **** {
 967:./tmk_core/protocol/lufa/lufa.c **** 
 968:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 969:./tmk_core/protocol/lufa/lufa.c ****     dprint("in MIDI_TASK\n");
 970:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 971:./tmk_core/protocol/lufa/lufa.c ****       return;
 972:./tmk_core/protocol/lufa/lufa.c ****     dprint("continuing in MIDI_TASK\n");
 973:./tmk_core/protocol/lufa/lufa.c **** 
 974:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);
 975:./tmk_core/protocol/lufa/lufa.c **** 
 976:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady())
 977:./tmk_core/protocol/lufa/lufa.c ****     {
 978:./tmk_core/protocol/lufa/lufa.c **** 
 979:./tmk_core/protocol/lufa/lufa.c ****         dprint("Endpoint is ready\n");
 980:./tmk_core/protocol/lufa/lufa.c **** 
 981:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDICommand = 0;
 982:./tmk_core/protocol/lufa/lufa.c ****         uint8_t MIDIPitch;
 983:./tmk_core/protocol/lufa/lufa.c **** 
 984:./tmk_core/protocol/lufa/lufa.c ****         /* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 
 985:./tmk_core/protocol/lufa/lufa.c ****         uint8_t Channel = MIDI_CHANNEL(1);
 986:./tmk_core/protocol/lufa/lufa.c **** 
 987:./tmk_core/protocol/lufa/lufa.c ****         MIDICommand = MIDI_COMMAND_NOTE_ON;
 988:./tmk_core/protocol/lufa/lufa.c ****         MIDIPitch   = 0x3E;
 989:./tmk_core/protocol/lufa/lufa.c **** 
 990:./tmk_core/protocol/lufa/lufa.c ****         /* Check if a MIDI command is to be sent */
 991:./tmk_core/protocol/lufa/lufa.c ****         if (MIDICommand)
 992:./tmk_core/protocol/lufa/lufa.c ****         {
 993:./tmk_core/protocol/lufa/lufa.c ****             dprint("Command exists\n");
 994:./tmk_core/protocol/lufa/lufa.c ****             MIDI_EventPacket_t MIDIEvent = (MIDI_EventPacket_t)
 995:./tmk_core/protocol/lufa/lufa.c ****                 {
 996:./tmk_core/protocol/lufa/lufa.c ****                     .Event       = MIDI_EVENT(0, MIDICommand),
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c ****                     .Data1       = MIDICommand | Channel,
 999:./tmk_core/protocol/lufa/lufa.c ****                     .Data2       = MIDIPitch,
1000:./tmk_core/protocol/lufa/lufa.c ****                     .Data3       = MIDI_STANDARD_VELOCITY,
1001:./tmk_core/protocol/lufa/lufa.c ****                 };
1002:./tmk_core/protocol/lufa/lufa.c **** 
1003:./tmk_core/protocol/lufa/lufa.c ****             /* Write the MIDI event packet to the endpoint */
1004:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Write_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
1005:./tmk_core/protocol/lufa/lufa.c **** 
1006:./tmk_core/protocol/lufa/lufa.c ****             /* Send the data in the endpoint to the host */
1007:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
1008:./tmk_core/protocol/lufa/lufa.c ****         }
1009:./tmk_core/protocol/lufa/lufa.c ****     }
1010:./tmk_core/protocol/lufa/lufa.c **** 
1011:./tmk_core/protocol/lufa/lufa.c **** 
1012:./tmk_core/protocol/lufa/lufa.c ****     /* Select the MIDI OUT stream */
1013:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);
1014:./tmk_core/protocol/lufa/lufa.c **** 
1015:./tmk_core/protocol/lufa/lufa.c ****     /* Check if a MIDI command has been received */
1016:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
1017:./tmk_core/protocol/lufa/lufa.c ****     {
1018:./tmk_core/protocol/lufa/lufa.c ****         MIDI_EventPacket_t MIDIEvent;
1019:./tmk_core/protocol/lufa/lufa.c **** 
1020:./tmk_core/protocol/lufa/lufa.c ****         /* Read the MIDI event packet from the endpoint */
1021:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
1022:./tmk_core/protocol/lufa/lufa.c **** 
1023:./tmk_core/protocol/lufa/lufa.c ****         /* If the endpoint is now empty, clear the bank */
1024:./tmk_core/protocol/lufa/lufa.c ****         if (!(Endpoint_BytesInEndpoint()))
1025:./tmk_core/protocol/lufa/lufa.c ****         {
1026:./tmk_core/protocol/lufa/lufa.c ****             /* Clear the endpoint ready for new packet */
1027:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearOUT();
1028:./tmk_core/protocol/lufa/lufa.c ****         }
1029:./tmk_core/protocol/lufa/lufa.c ****     }
1030:./tmk_core/protocol/lufa/lufa.c **** }
1031:./tmk_core/protocol/lufa/lufa.c **** 
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1035:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
1036:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1037:./tmk_core/protocol/lufa/lufa.c **** 
1038:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1039:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
1040:./tmk_core/protocol/lufa/lufa.c **** {
1041:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
1042:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
1043:./tmk_core/protocol/lufa/lufa.c **** }
1044:./tmk_core/protocol/lufa/lufa.c **** 
1045:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
1046:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
1047:./tmk_core/protocol/lufa/lufa.c **** {
1048:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
1049:./tmk_core/protocol/lufa/lufa.c **** }
1050:./tmk_core/protocol/lufa/lufa.c **** 
1051:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
1052:./tmk_core/protocol/lufa/lufa.c **** {
1053:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
1054:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
1055:./tmk_core/protocol/lufa/lufa.c ****   if (count)
1056:./tmk_core/protocol/lufa/lufa.c ****   {
1057:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
1058:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
1059:./tmk_core/protocol/lufa/lufa.c ****   }
1060:./tmk_core/protocol/lufa/lufa.c **** }
1061:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
1062:./tmk_core/protocol/lufa/lufa.c **** {
1063:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
1064:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
1065:./tmk_core/protocol/lufa/lufa.c **** 
1066:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
1067:./tmk_core/protocol/lufa/lufa.c ****   {
1068:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
1069:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
1072:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
1073:./tmk_core/protocol/lufa/lufa.c ****         return;
1074:./tmk_core/protocol/lufa/lufa.c ****     }
1075:./tmk_core/protocol/lufa/lufa.c **** 
1076:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
1077:./tmk_core/protocol/lufa/lufa.c **** 
1078:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
1079:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
1082:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
1083:./tmk_core/protocol/lufa/lufa.c ****     }
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
1086:./tmk_core/protocol/lufa/lufa.c ****   }
1087:./tmk_core/protocol/lufa/lufa.c **** }
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
1091:./tmk_core/protocol/lufa/lufa.c ****  * main
1092:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
1093:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
1094:./tmk_core/protocol/lufa/lufa.c **** {
1095:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
1096:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
1097:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
1098:./tmk_core/protocol/lufa/lufa.c **** 
1099:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
1100:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
1101:./tmk_core/protocol/lufa/lufa.c **** 
1102:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
1103:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
1104:./tmk_core/protocol/lufa/lufa.c **** }
1105:./tmk_core/protocol/lufa/lufa.c **** 
1106:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1107:./tmk_core/protocol/lufa/lufa.c **** {
1108:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1109:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1110:./tmk_core/protocol/lufa/lufa.c **** 
1111:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1112:./tmk_core/protocol/lufa/lufa.c **** 
1113:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1114:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1115:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1116:./tmk_core/protocol/lufa/lufa.c **** }
1117:./tmk_core/protocol/lufa/lufa.c **** 
1118:./tmk_core/protocol/lufa/lufa.c **** 
1119:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1120:./tmk_core/protocol/lufa/lufa.c **** void fallthrough_callback(MidiDevice * device,
1121:./tmk_core/protocol/lufa/lufa.c ****     uint16_t cnt, uint8_t byte0, uint8_t byte1, uint8_t byte2);
1122:./tmk_core/protocol/lufa/lufa.c **** void cc_callback(MidiDevice * device,
1123:./tmk_core/protocol/lufa/lufa.c ****     uint8_t chan, uint8_t num, uint8_t val);
1124:./tmk_core/protocol/lufa/lufa.c **** void sysex_callback(MidiDevice * device,
1125:./tmk_core/protocol/lufa/lufa.c ****     uint16_t start, uint8_t length, uint8_t * data);
1126:./tmk_core/protocol/lufa/lufa.c **** #endif
1127:./tmk_core/protocol/lufa/lufa.c **** 
1128:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1129:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1130:./tmk_core/protocol/lufa/lufa.c **** {
 1346               		.loc 1 1130 1 is_stmt 1 view -0
 1347               		.cfi_startproc
 1348               	/* prologue: function */
 1349               	/* frame size = 0 */
 1350               	/* stack size = 0 */
 1351               	.L__stack_usage = 0
1131:./tmk_core/protocol/lufa/lufa.c **** 
1132:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1133:./tmk_core/protocol/lufa/lufa.c ****     midi_device_init(&midi_device);
1134:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_send_func(&midi_device, usb_send_func);
1135:./tmk_core/protocol/lufa/lufa.c ****     midi_device_set_pre_input_process_func(&midi_device, usb_get_midi);
1136:./tmk_core/protocol/lufa/lufa.c **** #endif
1137:./tmk_core/protocol/lufa/lufa.c **** 
1138:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 1352               		.loc 1 1138 5 view .LVU404
 1353               	.LBB272:
 1354               	.LBI272:
1093:./tmk_core/protocol/lufa/lufa.c **** {
 1355               		.loc 1 1093 13 view .LVU405
 1356               	.LBB273:
1096:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1357               		.loc 1 1096 5 view .LVU406
1096:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1358               		.loc 1 1096 11 is_stmt 0 view .LVU407
 1359 0000 84B7      		in r24,0x34
 1360 0002 877F      		andi r24,lo8(-9)
 1361 0004 84BF      		out 0x34,r24
1097:./tmk_core/protocol/lufa/lufa.c **** 
 1362               		.loc 1 1097 5 is_stmt 1 view .LVU408
 1363               	.LBB274:
 1364               	.LBI274:
 1365               		.file 6 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\wdt.h"
   1:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 141:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 142:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 144:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 145:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 148:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 151:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 152:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 153:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 154:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 155:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 156:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 165:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 173:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 174:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 175:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 176:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 177:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 178:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 184:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 190:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 191:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 192:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 193:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 194:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 195:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 196:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 198:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 199:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 203:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 209:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 210:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 211:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 212:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 213:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 214:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 215:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 217:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 218:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 224:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 230:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 231:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 232:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 233:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 234:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 236:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 237:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 238:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 239:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 241:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 242:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 244:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 245:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 249:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 256:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 259:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 260:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 267:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 274:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 275:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 277:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 278:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 280:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 281:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 285:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 291:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 292:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 293:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 294:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 295:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 296:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 298:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 299:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 303:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 309:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 310:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 311:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 312:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 313:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 314:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 315:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 316:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 317:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 319:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 320:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 321:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 323:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 324:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 330:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 336:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 337:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 340:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 341:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 342:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 344:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 345:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 351:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 357:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 358:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 359:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 361:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 362:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 363:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 365:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 366:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 372:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 378:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 379:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 380:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 381:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 382:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 383:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 384:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 386:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 387:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 393:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 399:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 400:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 401:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 402:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 403:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 404:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 405:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 406:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 407:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 408:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 409:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 411:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 412:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 414:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 415:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 416:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 418:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 419:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 424:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 425:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 426:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 427:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 428:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 429:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 433:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 435:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 436:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 441:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 442:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 443:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 444:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 445:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 446:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 447:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 1366               		.loc 6 447 6 view .LVU409
 1367               	.LBE274:
 1368               	.LBE273:
 1369               	.LBE272:
 448:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 449:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 1370               		.loc 6 449 2 view .LVU410
 1371               	.LBB278:
 1372               	.LBB277:
 1373               	.LBB276:
 1374               	.LBB275:
 450:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 451:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 452:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 453:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 455:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 456:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 465:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 466:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 467:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 468:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 469:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 1375               		.loc 6 469 9 view .LVU411
 470:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 1376               		.loc 6 470 3 view .LVU412
 1377               	/* #APP */
 1378               	 ;  470 "c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h" 1
 1379 0006 0FB6      		in __tmp_reg__,__SREG__
 1380 0008 F894      		cli
 1381 000a A895      		wdr
 1382 000c 8091 6000 		lds r24,96
 1383 0010 8861      		ori r24,24
 1384 0012 8093 6000 		sts 96,r24
 1385 0016 1092 6000 		sts 96,__zero_reg__
 1386 001a 0FBE      		out __SREG__,__tmp_reg__
 1387               		
 1388               	 ;  0 "" 2
 1389               	/* #NOAPP */
 1390               	.LBE275:
 1391               	.LBE276:
1102:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1392               		.loc 1 1102 5 view .LVU413
1102:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1393               		.loc 1 1102 11 is_stmt 0 view .LVU414
 1394 001c 80E8      		ldi r24,lo8(-128)
 1395 001e 8093 6100 		sts 97,r24
1103:./tmk_core/protocol/lufa/lufa.c **** }
 1396               		.loc 1 1103 5 is_stmt 1 view .LVU415
1103:./tmk_core/protocol/lufa/lufa.c **** }
 1397               		.loc 1 1103 11 is_stmt 0 view .LVU416
 1398 0022 1092 6100 		sts 97,__zero_reg__
 1399               	.LBE277:
 1400               	.LBE278:
1139:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1401               		.loc 1 1139 5 is_stmt 1 view .LVU417
 1402 0026 0E94 0000 		call keyboard_setup
 1403               	.LVL81:
1140:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 1404               		.loc 1 1140 5 view .LVU418
 1405               	.LBB279:
 1406               	.LBI279:
1106:./tmk_core/protocol/lufa/lufa.c **** {
 1407               		.loc 1 1106 13 view .LVU419
 1408               	.LBB280:
1109:./tmk_core/protocol/lufa/lufa.c **** 
 1409               		.loc 1 1109 5 view .LVU420
 1410 002a 0E94 0000 		call USB_Disable
 1411               	.LVL82:
1111:./tmk_core/protocol/lufa/lufa.c **** 
 1412               		.loc 1 1111 5 view .LVU421
 1413 002e 0E94 0000 		call USB_Init
 1414               	.LVL83:
1114:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 1415               		.loc 1 1114 5 view .LVU422
 1416               	.LBB281:
 1417               	.LBI281:
 176:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 1418               		.loc 4 176 24 view .LVU423
 1419               	.LBE281:
 1420               	.LBE280:
 1421               	.LBE279:
 1422               		.loc 4 178 6 view .LVU424
 1423               	.LBB286:
 1424               	.LBB285:
 1425               	.LBB284:
 1426               	.LBB282:
 1427               	.LBI282:
  88:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
 1428               		.loc 5 88 23 view .LVU425
 1429               	.LBB283:
  90:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
 1430               		.loc 5 90 5 view .LVU426
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 1431               		.loc 5 113 7 view .LVU427
 113:./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 1432               		.loc 5 113 14 is_stmt 0 view .LVU428
 1433 0032 8091 E200 		lds r24,226
 1434 0036 8460      		ori r24,lo8(4)
 1435 0038 8093 E200 		sts 226,r24
 1436               		.loc 5 114 7 is_stmt 1 view .LVU429
 1437               	.LVL84:
 1438               		.loc 5 114 7 is_stmt 0 view .LVU430
 1439               	.LBE283:
 1440               	.LBE282:
 1441               	.LBE284:
1115:./tmk_core/protocol/lufa/lufa.c **** }
 1442               		.loc 1 1115 33 is_stmt 1 view .LVU431
 1443               	.LBE285:
 1444               	.LBE286:
1141:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1445               		.loc 1 1141 5 view .LVU432
 1446               	/* #APP */
 1447               	 ;  1141 "./tmk_core/protocol/lufa/lufa.c" 1
 1448 003c 7894      		sei
 1449               	 ;  0 "" 2
1142:./tmk_core/protocol/lufa/lufa.c **** 
1143:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1144:./tmk_core/protocol/lufa/lufa.c ****     midi_register_fallthrough_callback(&midi_device, fallthrough_callback);
1145:./tmk_core/protocol/lufa/lufa.c ****     midi_register_cc_callback(&midi_device, cc_callback);
1146:./tmk_core/protocol/lufa/lufa.c ****     midi_register_sysex_callback(&midi_device, sysex_callback);
1147:./tmk_core/protocol/lufa/lufa.c **** 
1148:./tmk_core/protocol/lufa/lufa.c ****     // init_notes();
1149:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 0, 1, 2);
1150:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_cc(&midi_device, 15, 1, 0);
1151:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteon(&midi_device, 0, 64, 127);
1152:./tmk_core/protocol/lufa/lufa.c ****     // midi_send_noteoff(&midi_device, 0, 64, 127);
1153:./tmk_core/protocol/lufa/lufa.c **** #endif
1154:./tmk_core/protocol/lufa/lufa.c **** 
1155:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
1156:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1157:./tmk_core/protocol/lufa/lufa.c **** #endif
1158:./tmk_core/protocol/lufa/lufa.c **** 
1159:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1160:./tmk_core/protocol/lufa/lufa.c **** 
1161:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1162:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1163:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1164:./tmk_core/protocol/lufa/lufa.c ****             ;
1165:./tmk_core/protocol/lufa/lufa.c ****     #else
1166:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1167:./tmk_core/protocol/lufa/lufa.c ****     #endif
1168:./tmk_core/protocol/lufa/lufa.c ****     }
1169:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1170:./tmk_core/protocol/lufa/lufa.c **** #else
1171:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1450               		.loc 1 1171 5 view .LVU433
 1451               	/* #NOAPP */
 1452 003e 0E94 0000 		call USB_USBTask
 1453               	.LVL85:
1172:./tmk_core/protocol/lufa/lufa.c **** #endif
1173:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1174:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1454               		.loc 1 1174 5 view .LVU434
 1455 0042 0E94 0000 		call keyboard_init
 1456               	.LVL86:
1175:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1457               		.loc 1 1175 5 view .LVU435
 1458 0046 80E0      		ldi r24,lo8(lufa_driver)
 1459 0048 90E0      		ldi r25,hi8(lufa_driver)
 1460 004a 0E94 0000 		call host_set_driver
 1461               	.LVL87:
 1462               	.L106:
1176:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1177:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1178:./tmk_core/protocol/lufa/lufa.c **** #endif
1179:./tmk_core/protocol/lufa/lufa.c **** 
1180:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1181:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1182:./tmk_core/protocol/lufa/lufa.c **** #endif
1183:./tmk_core/protocol/lufa/lufa.c **** 
1184:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1185:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1186:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(BLUETOOTH_ENABLE) && !defined(ADAFRUIT_BLE_ENABLE)
1187:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1463               		.loc 1 1187 32 is_stmt 0 view .LVU436
 1464 004e 8091 0000 		lds r24,USB_DeviceState
 1465               		.loc 1 1187 15 view .LVU437
 1466 0052 8530      		cpi r24,lo8(5)
 1467 0054 01F0      		breq .L110
1188:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1189:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
1190:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
1191:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
1192:./tmk_core/protocol/lufa/lufa.c ****             }
1193:./tmk_core/protocol/lufa/lufa.c ****         }
1194:./tmk_core/protocol/lufa/lufa.c ****         #endif
1195:./tmk_core/protocol/lufa/lufa.c **** 
1196:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1468               		.loc 1 1196 9 is_stmt 1 view .LVU438
 1469 0056 0E94 0000 		call keyboard_task
 1470               	.LVL88:
1187:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1471               		.loc 1 1187 15 is_stmt 0 view .LVU439
 1472 005a 00C0      		rjmp .L106
 1473               	.L110:
1188:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1474               		.loc 1 1188 25 is_stmt 1 view .LVU440
1189:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1475               		.loc 1 1189 13 view .LVU441
 1476 005c 0E94 0000 		call suspend_power_down
 1477               	.LVL89:
1190:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1478               		.loc 1 1190 13 view .LVU442
1190:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1479               		.loc 1 1190 16 is_stmt 0 view .LVU443
 1480 0060 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1481 0064 8823      		tst r24
 1482 0066 01F0      		breq .L106
1190:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1483               		.loc 1 1190 51 discriminator 1 view .LVU444
 1484 0068 0E94 0000 		call suspend_wakeup_condition
 1485               	.LVL90:
1190:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1486               		.loc 1 1190 48 discriminator 1 view .LVU445
 1487 006c 8823      		tst r24
 1488 006e 01F0      		breq .L106
1191:./tmk_core/protocol/lufa/lufa.c ****             }
 1489               		.loc 1 1191 21 is_stmt 1 view .LVU446
 1490 0070 0E94 0000 		call USB_Device_SendRemoteWakeup
 1491               	.LVL91:
 1492 0074 00C0      		rjmp .L106
 1493               		.cfi_endproc
 1494               	.LFE133:
 1496               	.global	lufa_driver
 1497               		.section	.data.lufa_driver,"aw"
 1500               	lufa_driver:
 1501 0000 0000      		.word	gs(keyboard_leds)
 1502 0002 0000      		.word	gs(send_keyboard)
 1503 0004 0000      		.word	gs(send_mouse)
 1504 0006 0000      		.word	gs(send_system)
 1505 0008 0000      		.word	gs(send_consumer)
 1506               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1509               	keyboard_report_sent:
 1510 0000 0000 0000 		.zero	32
 1510      0000 0000 
 1510      0000 0000 
 1510      0000 0000 
 1510      0000 0000 
 1511               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1514               	keyboard_led_stats:
 1515 0000 00        		.zero	1
 1516               	.global	keyboard_protocol
 1517               		.section	.data.keyboard_protocol,"aw"
 1520               	keyboard_protocol:
 1521 0000 01        		.byte	1
 1522               	.global	keyboard_idle
 1523               		.section	.bss.keyboard_idle,"aw",@nobits
 1526               	keyboard_idle:
 1527 0000 00        		.zero	1
 1528               		.text
 1529               	.Letext0:
 1530               		.file 7 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1531               		.file 8 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\lib\\gcc\\avr\\8.3.0\\include
 1532               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1533               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1534               		.file 11 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1535               		.file 12 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1536               		.file 13 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1537               		.file 14 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdio.h"
 1538               		.file 15 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon
 1539               		.file 16 "./tmk_core/common/report.h"
 1540               		.file 17 "./tmk_core/common/host_driver.h"
 1541               		.file 18 "./tmk_core/common/host.h"
 1542               		.file 19 "./tmk_core/common/action.h"
 1543               		.file 20 "./tmk_core/common/debug.h"
 1544               		.file 21 "./tmk_core/protocol/lufa/lufa.h"
 1545               		.file 22 "./quantum/keycode_config.h"
 1546               		.file 23 "./quantum/keymap.h"
 1547               		.file 24 "./tmk_core/common/action_layer.h"
 1548               		.file 25 "./tmk_core/common/timer.h"
 1549               		.file 26 "./tmk_core/common/action_util.h"
 1550               		.file 27 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdlib.h"
 1551               		.file 28 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1552               		.file 29 "./tmk_core/common/keyboard.h"
 1553               		.file 30 "./tmk_core/common/suspend.h"
 1554               		.file 31 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8
DEFINED SYMBOLS
                            *ABS*:00000000 lufa.c
C:\msys64\tmp\ccrXETTb.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccrXETTb.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccrXETTb.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccrXETTb.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccrXETTb.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccrXETTb.s:12     .text.keyboard_leds:00000000 keyboard_leds
C:\msys64\tmp\ccrXETTb.s:1514   .bss.keyboard_led_stats:00000000 keyboard_led_stats
C:\msys64\tmp\ccrXETTb.s:31     .text.send_consumer:00000000 send_consumer
C:\msys64\tmp\ccrXETTb.s:191    .text.send_system:00000000 send_system
C:\msys64\tmp\ccrXETTb.s:346    .text.send_mouse:00000000 send_mouse
C:\msys64\tmp\ccrXETTb.s:479    .text.send_keyboard:00000000 send_keyboard
C:\msys64\tmp\ccrXETTb.s:1520   .data.keyboard_protocol:00000000 keyboard_protocol
C:\msys64\tmp\ccrXETTb.s:1509   .bss.keyboard_report_sent:00000000 keyboard_report_sent
C:\msys64\tmp\ccrXETTb.s:724    .text.EVENT_USB_Device_Connect:00000000 EVENT_USB_Device_Connect
C:\msys64\tmp\ccrXETTb.s:780    .text.EVENT_USB_Device_Disconnect:00000000 EVENT_USB_Device_Disconnect
C:\msys64\tmp\ccrXETTb.s:801    .text.EVENT_USB_Device_Reset:00000000 EVENT_USB_Device_Reset
C:\msys64\tmp\ccrXETTb.s:816    .text.EVENT_USB_Device_Suspend:00000000 EVENT_USB_Device_Suspend
C:\msys64\tmp\ccrXETTb.s:834    .text.EVENT_USB_Device_WakeUp:00000000 EVENT_USB_Device_WakeUp
C:\msys64\tmp\ccrXETTb.s:852    .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
C:\msys64\tmp\ccrXETTb.s:971    .text.EVENT_USB_Device_ControlRequest:00000000 EVENT_USB_Device_ControlRequest
C:\msys64\tmp\ccrXETTb.s:1526   .bss.keyboard_idle:00000000 keyboard_idle
C:\msys64\tmp\ccrXETTb.s:1322   .text.sendchar:00000000 sendchar
C:\msys64\tmp\ccrXETTb.s:1344   .text.startup.main:00000000 main
C:\msys64\tmp\ccrXETTb.s:1500   .data.lufa_driver:00000000 lufa_driver

UNDEFINED SYMBOLS
USB_DeviceState
Endpoint_Write_Stream_LE
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
__do_copy_data
__do_clear_bss
