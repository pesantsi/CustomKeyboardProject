   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB108:
  16               		.file 1 "./tmk_core/common/avr/suspend.c"
   1:./tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:./tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:./tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:./tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:./tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:./tmk_core/common/avr/suspend.c **** #include "action.h"
   7:./tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:./tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:./tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:./tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:./tmk_core/common/avr/suspend.c **** #include "led.h"
  12:./tmk_core/common/avr/suspend.c **** 
  13:./tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  14:./tmk_core/common/avr/suspend.c **** 	#include "lufa.h"
  15:./tmk_core/common/avr/suspend.c **** #endif
  16:./tmk_core/common/avr/suspend.c **** 
  17:./tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  18:./tmk_core/common/avr/suspend.c ****     #include "audio.h"
  19:./tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  20:./tmk_core/common/avr/suspend.c **** 
  21:./tmk_core/common/avr/suspend.c **** 
  22:./tmk_core/common/avr/suspend.c **** 
  23:./tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  24:./tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  25:./tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  26:./tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  27:./tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  28:./tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  29:./tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  30:./tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  31:./tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  32:./tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  33:./tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  34:./tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  35:./tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  36:./tmk_core/common/avr/suspend.c ****     : "r0"  \
  37:./tmk_core/common/avr/suspend.c **** )
  38:./tmk_core/common/avr/suspend.c **** 
  39:./tmk_core/common/avr/suspend.c **** 
  40:./tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time)
  41:./tmk_core/common/avr/suspend.c **** {
  17               		.loc 1 41 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  42:./tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 42 5 view .LVU1
  24               	/* #APP */
  25               	 ;  42 "./tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  43:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 43 5 view .LVU2
  29               		.loc 1 43 5 view .LVU3
  30               	/* #NOAPP */
  31 0002 83B7      		in r24,0x33
  32               	.LVL1:
  33               		.loc 1 43 5 is_stmt 0 view .LVU4
  34 0004 817F      		andi r24,lo8(-15)
  35 0006 83BF      		out 0x33,r24
  44:./tmk_core/common/avr/suspend.c ****     sleep_enable();
  36               		.loc 1 44 5 is_stmt 1 view .LVU5
  37               		.loc 1 44 5 view .LVU6
  38 0008 83B7      		in r24,0x33
  39 000a 8160      		ori r24,lo8(1)
  40 000c 83BF      		out 0x33,r24
  45:./tmk_core/common/avr/suspend.c ****     sei();
  41               		.loc 1 45 5 view .LVU7
  42               	/* #APP */
  43               	 ;  45 "./tmk_core/common/avr/suspend.c" 1
  44 000e 7894      		sei
  45               	 ;  0 "" 2
  46:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
  46               		.loc 1 46 5 view .LVU8
  47               		.loc 1 46 5 view .LVU9
  48               	 ;  46 "./tmk_core/common/avr/suspend.c" 1
  49 0010 8895      		sleep
  50               		
  51               	 ;  0 "" 2
  47:./tmk_core/common/avr/suspend.c ****     sleep_disable();
  52               		.loc 1 47 5 view .LVU10
  53               		.loc 1 47 5 view .LVU11
  54               	/* #NOAPP */
  55 0012 83B7      		in r24,0x33
  56 0014 8E7F      		andi r24,lo8(-2)
  57 0016 83BF      		out 0x33,r24
  58               	/* epilogue start */
  48:./tmk_core/common/avr/suspend.c **** }
  59               		.loc 1 48 1 is_stmt 0 view .LVU12
  60 0018 0895      		ret
  61               		.cfi_endproc
  62               	.LFE108:
  64               		.section	.text.suspend_power_down,"ax",@progbits
  65               	.global	suspend_power_down
  67               	suspend_power_down:
  68               	.LFB110:
  49:./tmk_core/common/avr/suspend.c **** 
  50:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  51:./tmk_core/common/avr/suspend.c **** /* Power down MCU with watchdog timer
  52:./tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  53:./tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  54:./tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  55:./tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  56:./tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  57:./tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  58:./tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  59:./tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  60:./tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  61:./tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  62:./tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  63:./tmk_core/common/avr/suspend.c ****  */
  64:./tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  65:./tmk_core/common/avr/suspend.c **** 
  66:./tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto)
  67:./tmk_core/common/avr/suspend.c **** {
  68:./tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  69:./tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  70:./tmk_core/common/avr/suspend.c **** #endif
  71:./tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  72:./tmk_core/common/avr/suspend.c **** 
  73:./tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
  74:./tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  75:./tmk_core/common/avr/suspend.c **** 
  76:./tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  77:./tmk_core/common/avr/suspend.c **** 	backlight_set(0);
  78:./tmk_core/common/avr/suspend.c **** #endif
  79:./tmk_core/common/avr/suspend.c **** 
  80:./tmk_core/common/avr/suspend.c **** 	// Turn off LED indicators
  81:./tmk_core/common/avr/suspend.c **** 	led_set(0);
  82:./tmk_core/common/avr/suspend.c **** 
  83:./tmk_core/common/avr/suspend.c **** 	#ifdef AUDIO_ENABLE
  84:./tmk_core/common/avr/suspend.c ****         // This sometimes disables the start-up noise, so it's been disabled
  85:./tmk_core/common/avr/suspend.c **** 		// stop_all_notes();
  86:./tmk_core/common/avr/suspend.c **** 	#endif /* AUDIO_ENABLE */
  87:./tmk_core/common/avr/suspend.c **** 
  88:./tmk_core/common/avr/suspend.c ****     // TODO: more power saving
  89:./tmk_core/common/avr/suspend.c ****     // See PicoPower application note
  90:./tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
  91:./tmk_core/common/avr/suspend.c ****     // - prescale clock
  92:./tmk_core/common/avr/suspend.c ****     // - BOD disable
  93:./tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
  94:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  95:./tmk_core/common/avr/suspend.c ****     sleep_enable();
  96:./tmk_core/common/avr/suspend.c ****     sei();
  97:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
  98:./tmk_core/common/avr/suspend.c ****     sleep_disable();
  99:./tmk_core/common/avr/suspend.c **** 
 100:./tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 101:./tmk_core/common/avr/suspend.c ****     wdt_disable();
 102:./tmk_core/common/avr/suspend.c **** }
 103:./tmk_core/common/avr/suspend.c **** #endif
 104:./tmk_core/common/avr/suspend.c **** 
 105:./tmk_core/common/avr/suspend.c **** void suspend_power_down(void)
 106:./tmk_core/common/avr/suspend.c **** {
  69               		.loc 1 106 1 is_stmt 1 view -0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
 107:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 108:./tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
  75               		.loc 1 108 5 view .LVU14
  76               	.LBB11:
  77               	.LBI11:
  66:./tmk_core/common/avr/suspend.c **** {
  78               		.loc 1 66 13 view .LVU15
  79               	.LVL2:
  80               	.LBB12:
  69:./tmk_core/common/avr/suspend.c **** #endif
  81               		.loc 1 69 5 view .LVU16
  69:./tmk_core/common/avr/suspend.c **** #endif
  82               		.loc 1 69 25 is_stmt 0 view .LVU17
  83 0000 8091 0000 		lds r24,USB_DeviceState
  69:./tmk_core/common/avr/suspend.c **** #endif
  84               		.loc 1 69 8 view .LVU18
  85 0004 8430      		cpi r24,lo8(4)
  86 0006 01F0      		breq .L2
  71:./tmk_core/common/avr/suspend.c **** 
  87               		.loc 1 71 5 is_stmt 1 view .LVU19
  71:./tmk_core/common/avr/suspend.c **** 
  88               		.loc 1 71 17 is_stmt 0 view .LVU20
  89 0008 1092 0000 		sts wdt_timeout,__zero_reg__
  74:./tmk_core/common/avr/suspend.c **** 
  90               		.loc 1 74 5 is_stmt 1 view .LVU21
  91 000c 88E1      		ldi r24,lo8(24)
  92 000e 90E0      		ldi r25,0
  93 0010 20E4      		ldi r18,lo8(64)
  94               	/* #APP */
  95               	 ;  74 "./tmk_core/common/avr/suspend.c" 1
  96 0012 0FB6      		in __tmp_reg__,__SREG__
  97 0014 F894      		cli
  98 0016 A895      		wdr
  99 0018 8093 6000 		sts 96,r24
 100 001c 0FBE      		out __SREG__,__tmp_reg__
 101 001e 2093 6000 		sts 96,r18
 102               		
 103               	 ;  0 "" 2
  81:./tmk_core/common/avr/suspend.c **** 
 104               		.loc 1 81 2 view .LVU22
 105               	/* #NOAPP */
 106 0022 80E0      		ldi r24,0
 107 0024 0E94 0000 		call led_set
 108               	.LVL3:
  94:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 109               		.loc 1 94 5 view .LVU23
  94:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 110               		.loc 1 94 5 view .LVU24
 111 0028 83B7      		in r24,0x33
 112 002a 817F      		andi r24,lo8(-15)
 113 002c 8460      		ori r24,lo8(4)
 114 002e 83BF      		out 0x33,r24
  95:./tmk_core/common/avr/suspend.c ****     sei();
 115               		.loc 1 95 5 view .LVU25
  95:./tmk_core/common/avr/suspend.c ****     sei();
 116               		.loc 1 95 5 view .LVU26
 117 0030 83B7      		in r24,0x33
 118 0032 8160      		ori r24,lo8(1)
 119 0034 83BF      		out 0x33,r24
  96:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
 120               		.loc 1 96 5 view .LVU27
 121               	/* #APP */
 122               	 ;  96 "./tmk_core/common/avr/suspend.c" 1
 123 0036 7894      		sei
 124               	 ;  0 "" 2
  97:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 125               		.loc 1 97 5 view .LVU28
  97:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 126               		.loc 1 97 5 view .LVU29
 127               	 ;  97 "./tmk_core/common/avr/suspend.c" 1
 128 0038 8895      		sleep
 129               		
 130               	 ;  0 "" 2
  98:./tmk_core/common/avr/suspend.c **** 
 131               		.loc 1 98 5 view .LVU30
  98:./tmk_core/common/avr/suspend.c **** 
 132               		.loc 1 98 5 view .LVU31
 133               	/* #NOAPP */
 134 003a 83B7      		in r24,0x33
 135 003c 8E7F      		andi r24,lo8(-2)
 136 003e 83BF      		out 0x33,r24
 101:./tmk_core/common/avr/suspend.c **** }
 137               		.loc 1 101 5 view .LVU32
 138               	.LBB13:
 139               	.LBI13:
 140               		.file 2 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\wdt.h"
   1:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 141:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 142:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 144:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 145:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 148:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 151:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 152:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 153:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 154:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 155:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 156:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 165:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 173:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 174:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 175:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 176:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 177:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 178:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 184:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 190:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 191:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 192:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 193:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 194:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 195:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 196:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 198:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 199:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 203:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 209:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 210:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 211:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 212:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 213:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 214:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 215:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 217:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 218:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 224:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 230:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 231:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 232:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 233:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 234:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 236:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 237:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 238:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 239:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 241:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 242:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 244:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 245:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 249:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 255:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 256:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 257:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 259:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 260:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 262:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 263:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 267:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 273:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 274:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 275:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 277:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 278:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 280:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 281:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 285:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 291:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 292:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 293:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 294:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 295:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 296:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 298:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 299:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 303:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 309:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 310:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 311:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 312:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 313:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 314:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 315:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 316:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 317:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 319:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 320:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 321:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 323:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 324:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 330:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 336:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 337:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 340:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 341:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 342:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 344:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 345:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 351:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 357:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 358:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 359:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 361:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 362:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 363:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 365:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 366:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 372:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 378:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 379:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 380:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 381:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 382:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 383:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 384:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 386:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 387:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 393:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 399:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 400:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 401:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 402:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 403:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 404:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 405:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 406:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 407:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 408:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 409:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 411:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 412:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 414:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 415:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 416:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 418:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 419:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 424:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 425:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 426:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 427:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 428:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 429:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 433:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 435:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 436:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 441:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 442:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 443:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 444:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 445:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 446:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 447:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 141               		.loc 2 447 6 view .LVU33
 142               	.LBE13:
 143               	.LBE12:
 144               	.LBE11:
 448:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 449:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 145               		.loc 2 449 2 view .LVU34
 146               	.LBB17:
 147               	.LBB16:
 148               	.LBB15:
 149               	.LBB14:
 450:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 451:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 452:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 453:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 455:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 456:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 465:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 466:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 467:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 468:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 469:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 150               		.loc 2 469 9 view .LVU35
 470:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 151               		.loc 2 470 3 view .LVU36
 152               	/* #APP */
 153               	 ;  470 "c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h" 1
 154 0040 0FB6      		in __tmp_reg__,__SREG__
 155 0042 F894      		cli
 156 0044 A895      		wdr
 157 0046 8091 6000 		lds r24,96
 158 004a 8861      		ori r24,24
 159 004c 8093 6000 		sts 96,r24
 160 0050 1092 6000 		sts 96,__zero_reg__
 161 0054 0FBE      		out __SREG__,__tmp_reg__
 162               		
 163               	 ;  0 "" 2
 164               	.LVL4:
 165               	/* #NOAPP */
 166               	.L2:
 167               	/* epilogue start */
 168               		.loc 2 470 3 is_stmt 0 view .LVU37
 169               	.LBE14:
 170               	.LBE15:
 171               	.LBE16:
 172               	.LBE17:
 109:./tmk_core/common/avr/suspend.c **** #endif
 110:./tmk_core/common/avr/suspend.c **** }
 173               		.loc 1 110 1 view .LVU38
 174 0056 0895      		ret
 175               		.cfi_endproc
 176               	.LFE110:
 178               		.section	.text.matrix_power_up,"ax",@progbits
 179               		.weak	matrix_power_up
 181               	matrix_power_up:
 182               	.LFB111:
 111:./tmk_core/common/avr/suspend.c **** 
 112:./tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_up(void) {}
 183               		.loc 1 112 51 is_stmt 1 view -0
 184               		.cfi_startproc
 185               	/* prologue: function */
 186               	/* frame size = 0 */
 187               	/* stack size = 0 */
 188               	.L__stack_usage = 0
 189               		.loc 1 112 52 view .LVU40
 190               	/* epilogue start */
 191               		.loc 1 112 1 is_stmt 0 view .LVU41
 192 0000 0895      		ret
 193               		.cfi_endproc
 194               	.LFE111:
 196               		.set	matrix_power_up.localalias.0,matrix_power_up
 197               		.section	.text.matrix_power_down,"ax",@progbits
 198               		.weak	matrix_power_down
 200               	matrix_power_down:
 201               	.LFB117:
 202               		.cfi_startproc
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 0 */
 206               	.L__stack_usage = 0
 207               	/* epilogue start */
 208 0000 0895      		ret
 209               		.cfi_endproc
 210               	.LFE117:
 212               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 213               	.global	suspend_wakeup_condition
 215               	suspend_wakeup_condition:
 216               	.LFB113:
 113:./tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_down(void) {}
 114:./tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void)
 115:./tmk_core/common/avr/suspend.c **** {
 217               		.loc 1 115 1 is_stmt 1 view -0
 218               		.cfi_startproc
 219               	/* prologue: function */
 220               	/* frame size = 0 */
 221               	/* stack size = 0 */
 222               	.L__stack_usage = 0
 116:./tmk_core/common/avr/suspend.c ****     matrix_power_up();
 223               		.loc 1 116 5 view .LVU43
 224 0000 0E94 0000 		call matrix_power_up
 225               	.LVL5:
 117:./tmk_core/common/avr/suspend.c ****     matrix_scan();
 226               		.loc 1 117 5 view .LVU44
 227 0004 0E94 0000 		call matrix_scan
 228               	.LVL6:
 118:./tmk_core/common/avr/suspend.c ****     matrix_power_down();
 229               		.loc 1 118 5 view .LVU45
 230 0008 0E94 0000 		call matrix_power_down
 231               	.LVL7:
 119:./tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 232               		.loc 1 119 5 view .LVU46
 233               	.LBB18:
 234               		.loc 1 119 10 view .LVU47
 120:./tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 235               		.loc 1 120 9 view .LVU48
 236               		.loc 1 120 13 is_stmt 0 view .LVU49
 237 000c 80E0      		ldi r24,0
 238 000e 0E94 0000 		call matrix_get_row
 239               	.LVL8:
 240               		.loc 1 120 39 view .LVU50
 241 0012 91E0      		ldi r25,lo8(1)
 242               		.loc 1 120 12 view .LVU51
 243 0014 8111      		cpse r24,__zero_reg__
 244 0016 00C0      		rjmp .L9
 245               	.LVL9:
 246               		.loc 1 120 9 is_stmt 1 view .LVU52
 247               		.loc 1 120 13 is_stmt 0 view .LVU53
 248 0018 81E0      		ldi r24,lo8(1)
 249 001a 0E94 0000 		call matrix_get_row
 250               	.LVL10:
 251               		.loc 1 120 12 view .LVU54
 252 001e 91E0      		ldi r25,lo8(1)
 253 0020 8111      		cpse r24,__zero_reg__
 254 0022 00C0      		rjmp .L9
 255 0024 90E0      		ldi r25,0
 256               	.LVL11:
 257               	.L9:
 258               		.loc 1 120 12 view .LVU55
 259               	.LBE18:
 121:./tmk_core/common/avr/suspend.c ****     }
 122:./tmk_core/common/avr/suspend.c ****      return false;
 123:./tmk_core/common/avr/suspend.c **** }
 260               		.loc 1 123 1 view .LVU56
 261 0026 892F      		mov r24,r25
 262               	/* epilogue start */
 263 0028 0895      		ret
 264               		.cfi_endproc
 265               	.LFE113:
 267               		.section	.text.suspend_wakeup_init,"ax",@progbits
 268               	.global	suspend_wakeup_init
 270               	suspend_wakeup_init:
 271               	.LFB114:
 124:./tmk_core/common/avr/suspend.c **** 
 125:./tmk_core/common/avr/suspend.c **** // run immediately after wakeup
 126:./tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void)
 127:./tmk_core/common/avr/suspend.c **** {
 272               		.loc 1 127 1 is_stmt 1 view -0
 273               		.cfi_startproc
 274               	/* prologue: function */
 275               	/* frame size = 0 */
 276               	/* stack size = 0 */
 277               	.L__stack_usage = 0
 128:./tmk_core/common/avr/suspend.c ****     // clear keyboard state
 129:./tmk_core/common/avr/suspend.c ****     clear_keyboard();
 278               		.loc 1 129 5 view .LVU58
 279 0000 0E94 0000 		call clear_keyboard
 280               	.LVL12:
 130:./tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 131:./tmk_core/common/avr/suspend.c ****     backlight_init();
 132:./tmk_core/common/avr/suspend.c **** #endif
 133:./tmk_core/common/avr/suspend.c **** 	led_set(host_keyboard_leds());
 281               		.loc 1 133 2 view .LVU59
 282 0004 0E94 0000 		call host_keyboard_leds
 283               	.LVL13:
 284 0008 0C94 0000 		jmp led_set
 285               	.LVL14:
 286               		.cfi_endproc
 287               	.LFE114:
 289               		.section	.text.__vector_12,"ax",@progbits
 290               	.global	__vector_12
 292               	__vector_12:
 293               	.LFB115:
 134:./tmk_core/common/avr/suspend.c **** }
 135:./tmk_core/common/avr/suspend.c **** 
 136:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 137:./tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 138:./tmk_core/common/avr/suspend.c **** ISR(WDT_vect)
 139:./tmk_core/common/avr/suspend.c **** {
 294               		.loc 1 139 1 view -0
 295               		.cfi_startproc
 296 0000 1F92 1FB6 		__gcc_isr 1
 296      1F92 1124 
 296      8F93 
 297 000a 9F93      		push r25
 298               	.LCFI0:
 299               		.cfi_def_cfa_offset 3
 300               		.cfi_offset 25, -2
 301 000c AF93      		push r26
 302               	.LCFI1:
 303               		.cfi_def_cfa_offset 4
 304               		.cfi_offset 26, -3
 305 000e BF93      		push r27
 306               	.LCFI2:
 307               		.cfi_def_cfa_offset 5
 308               		.cfi_offset 27, -4
 309               	/* prologue: Signal */
 310               	/* frame size = 0 */
 311               	/* stack size = 3...7 */
 312               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 140:./tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 141:./tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 313               		.loc 1 141 5 view .LVU61
 314 0010 8091 0000 		lds r24,wdt_timeout
 315 0014 8111      		cpse r24,__zero_reg__
 316 0016 00C0      		rjmp .L14
 142:./tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 143:./tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 317               		.loc 1 143 13 view .LVU62
 318               		.loc 1 143 25 is_stmt 0 view .LVU63
 319 0018 8091 0000 		lds r24,timer_count
 320 001c 9091 0000 		lds r25,timer_count+1
 321 0020 A091 0000 		lds r26,timer_count+2
 322 0024 B091 0000 		lds r27,timer_count+3
 323 0028 4196      		adiw r24,17
 324 002a A11D      		adc r26,__zero_reg__
 325 002c B11D      		adc r27,__zero_reg__
 326 002e 8093 0000 		sts timer_count,r24
 327 0032 9093 0000 		sts timer_count+1,r25
 328 0036 A093 0000 		sts timer_count+2,r26
 329 003a B093 0000 		sts timer_count+3,r27
 144:./tmk_core/common/avr/suspend.c ****             break;
 330               		.loc 1 144 13 is_stmt 1 view .LVU64
 145:./tmk_core/common/avr/suspend.c ****         default:
 146:./tmk_core/common/avr/suspend.c ****             ;
 331               		.loc 1 146 13 view .LVU65
 332               	.L14:
 333               	/* epilogue start */
 147:./tmk_core/common/avr/suspend.c ****     }
 148:./tmk_core/common/avr/suspend.c **** }
 334               		.loc 1 148 1 is_stmt 0 view .LVU66
 335 003e BF91      		pop r27
 336 0040 AF91      		pop r26
 337 0042 9F91      		pop r25
 338 0044 8F91 1F90 		__gcc_isr 2
 338      1FBE 1F90 
 339 004c 1895      		reti
 340               		__gcc_isr 0,r24
 341               		.cfi_endproc
 342               	.LFE115:
 344               		.section	.bss.wdt_timeout,"aw",@nobits
 347               	wdt_timeout:
 348 0000 00        		.zero	1
 349               		.text
 350               	.Letext0:
 351               		.file 3 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 352               		.file 4 "./tmk_core/common/action.h"
 353               		.file 5 "./tmk_core/common/timer.h"
 354               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 355               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 356               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 357               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 358               		.file 10 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdio.h"
 359               		.file 11 "./tmk_core/common/report.h"
 360               		.file 12 "./tmk_core/common/host_driver.h"
 361               		.file 13 "./tmk_core/common/host.h"
 362               		.file 14 "./tmk_core/protocol/lufa/lufa.h"
 363               		.file 15 "./tmk_core/common/led.h"
 364               		.file 16 "./tmk_core/common/matrix.h"
 365               		.file 17 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:00000000 suspend.c
C:\msys64\tmp\ccfEFDZF.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccfEFDZF.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccfEFDZF.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccfEFDZF.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccfEFDZF.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccfEFDZF.s:13     .text.suspend_idle:00000000 suspend_idle
C:\msys64\tmp\ccfEFDZF.s:67     .text.suspend_power_down:00000000 suspend_power_down
C:\msys64\tmp\ccfEFDZF.s:347    .bss.wdt_timeout:00000000 wdt_timeout
C:\msys64\tmp\ccfEFDZF.s:181    .text.matrix_power_up:00000000 matrix_power_up
C:\msys64\tmp\ccfEFDZF.s:181    .text.matrix_power_up:00000000 matrix_power_up.localalias.0
C:\msys64\tmp\ccfEFDZF.s:200    .text.matrix_power_down:00000000 matrix_power_down
C:\msys64\tmp\ccfEFDZF.s:215    .text.suspend_wakeup_condition:00000000 suspend_wakeup_condition
C:\msys64\tmp\ccfEFDZF.s:270    .text.suspend_wakeup_init:00000000 suspend_wakeup_init
C:\msys64\tmp\ccfEFDZF.s:292    .text.__vector_12:00000000 __vector_12
                            *ABS*:00000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
led_set
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
