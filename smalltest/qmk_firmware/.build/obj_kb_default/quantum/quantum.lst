   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB107:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 7 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 7 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 8 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 8 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  48               		.loc 1 10 5 is_stmt 1 view .LVU4
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 15 3 view .LVU5
  50               		.loc 1 15 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 16 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 17 3 view .LVU8
  60               		.loc 1 17 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 18 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 19 3 view .LVU11
  70               		.loc 1 19 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 20 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 21 3 view .LVU14
  80               		.loc 1 21 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 22 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 24 3 view .LVU17
  90               		.loc 1 24 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 26 3 is_stmt 1 view .LVU19
  27:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 27 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 28 3 view .LVU21
  29:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 29 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 30 3 view .LVU23
  31:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 31 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 32 3 view .LVU25
  33:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 33 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  34:quantum/quantum.c **** }
 117               		.loc 1 34 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 34 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  33:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 33 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 34 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 34 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 34 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE107:
 143               		.section	.text.register_code16,"ax",@progbits
 144               	.global	register_code16
 146               	register_code16:
 147               	.LVL14:
 148               	.LFB108:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 149               		.loc 1 36 38 is_stmt 1 view -0
 150               		.cfi_startproc
 151               		.loc 1 36 38 is_stmt 0 view .LVU34
 152 0000 CF93      		push r28
 153               	.LCFI4:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 28, -2
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 1 */
 159               	.L__stack_usage = 1
 160 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 161               		.loc 1 37 3 is_stmt 1 view .LVU35
 162 0004 60E0      		ldi r22,lo8(gs(register_code))
 163 0006 70E0      		ldi r23,hi8(gs(register_code))
 164 0008 0E94 0000 		call do_code16
 165               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 166               		.loc 1 38 3 view .LVU36
 167 000c 8C2F      		mov r24,r28
 168               	/* epilogue start */
  39:quantum/quantum.c **** }
 169               		.loc 1 39 1 is_stmt 0 view .LVU37
 170 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 171               		.loc 1 38 3 view .LVU38
 172 0010 0C94 0000 		jmp register_code
 173               	.LVL16:
 174               		.cfi_endproc
 175               	.LFE108:
 177               		.section	.text.unregister_code16,"ax",@progbits
 178               	.global	unregister_code16
 180               	unregister_code16:
 181               	.LVL17:
 182               	.LFB109:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 183               		.loc 1 41 40 is_stmt 1 view -0
 184               		.cfi_startproc
 185               		.loc 1 41 40 is_stmt 0 view .LVU40
 186 0000 CF93      		push r28
 187               	.LCFI5:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 28, -2
 190 0002 DF93      		push r29
 191               	.LCFI6:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 29, -3
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 2 */
 197               	.L__stack_usage = 2
 198 0004 EC01      		movw r28,r24
  42:quantum/quantum.c ****   unregister_code (code);
 199               		.loc 1 42 3 is_stmt 1 view .LVU41
 200 0006 0E94 0000 		call unregister_code
 201               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 202               		.loc 1 43 3 view .LVU42
 203 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 204 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 205 000e CE01      		movw r24,r28
 206               	/* epilogue start */
  44:quantum/quantum.c **** }
 207               		.loc 1 44 1 is_stmt 0 view .LVU43
 208 0010 DF91      		pop r29
 209 0012 CF91      		pop r28
 210               	.LVL19:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 211               		.loc 1 43 3 view .LVU44
 212 0014 0C94 0000 		jmp do_code16
 213               	.LVL20:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 214               		.loc 1 43 3 view .LVU45
 215               		.cfi_endproc
 216               	.LFE109:
 218               		.section	.text.process_action_kb,"ax",@progbits
 219               		.weak	process_action_kb
 221               	process_action_kb:
 222               	.LVL21:
 223               	.LFB110:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 224               		.loc 1 47 45 is_stmt 1 view -0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
 230               		.loc 1 48 3 view .LVU47
  49:quantum/quantum.c **** }
 231               		.loc 1 49 1 is_stmt 0 view .LVU48
 232 0000 81E0      		ldi r24,lo8(1)
 233               	.LVL22:
 234               	/* epilogue start */
 235               		.loc 1 49 1 view .LVU49
 236 0002 0895      		ret
 237               		.cfi_endproc
 238               	.LFE110:
 240               		.section	.text.process_record_user,"ax",@progbits
 241               		.weak	process_record_user
 243               	process_record_user:
 244               	.LVL23:
 245               	.LFB112:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 246               		.loc 1 57 65 is_stmt 1 view -0
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
 252               		.loc 1 58 3 view .LVU51
  59:quantum/quantum.c **** }
 253               		.loc 1 59 1 is_stmt 0 view .LVU52
 254 0000 81E0      		ldi r24,lo8(1)
 255               	.LVL24:
 256               	/* epilogue start */
 257               		.loc 1 59 1 view .LVU53
 258 0002 0895      		ret
 259               		.cfi_endproc
 260               	.LFE112:
 262               		.section	.text.process_record_kb,"ax",@progbits
 263               		.weak	process_record_kb
 265               	process_record_kb:
 266               	.LVL25:
 267               	.LFB111:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 268               		.loc 1 52 63 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 274               		.loc 1 53 3 view .LVU55
  53:quantum/quantum.c **** }
 275               		.loc 1 53 10 is_stmt 0 view .LVU56
 276 0000 0C94 0000 		jmp process_record_user
 277               	.LVL26:
  53:quantum/quantum.c **** }
 278               		.loc 1 53 10 view .LVU57
 279               		.cfi_endproc
 280               	.LFE111:
 282               		.section	.text.reset_keyboard,"ax",@progbits
 283               	.global	reset_keyboard
 285               	reset_keyboard:
 286               	.LFB113:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 287               		.loc 1 61 27 is_stmt 1 view -0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 293               		.loc 1 62 3 view .LVU59
 294 0000 0E94 0000 		call clear_keyboard
 295               	.LVL27:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
 296               		.loc 1 67 3 view .LVU60
 297               	.LBB4:
 298               	.LBI4:
 299               		.file 2 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 300               		.loc 2 166 1 view .LVU61
 301               	.LBB5:
 167:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 302               		.loc 2 168 2 view .LVU62
 169:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 303               		.loc 2 172 2 view .LVU63
 173:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 304               		.loc 2 173 2 view .LVU64
 174:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 305               		.loc 2 174 2 view .LVU65
 175:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 306               		.loc 2 184 3 view .LVU66
 185:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys64\home\pc-office\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 307               		.loc 2 187 2 view .LVU67
 308 0004 2FEF      		ldi r18,lo8(799999)
 309 0006 84E3      		ldi r24,hi8(799999)
 310 0008 9CE0      		ldi r25,hlo8(799999)
 311 000a 2150      	1:	subi r18,1
 312 000c 8040      		sbci r24,0
 313 000e 9040      		sbci r25,0
 314 0010 01F4      		brne 1b
 315 0012 00C0      		rjmp .
 316 0014 0000      		nop
 317               	.LVL28:
 318               		.loc 2 187 2 is_stmt 0 view .LVU68
 319               	.LBE5:
 320               	.LBE4:
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 321               		.loc 1 71 3 is_stmt 1 view .LVU69
 322 0016 0C94 0000 		jmp bootloader_jump
 323               	.LVL29:
 324               		.cfi_endproc
 325               	.LFE113:
 327               		.section	.text.process_record_quantum,"ax",@progbits
 328               	.global	process_record_quantum
 330               	process_record_quantum:
 331               	.LVL30:
 332               	.LFB114:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 333               		.loc 1 86 50 view -0
 334               		.cfi_startproc
 335               		.loc 1 86 50 is_stmt 0 view .LVU71
 336 0000 FF92      		push r15
 337               	.LCFI7:
 338               		.cfi_def_cfa_offset 3
 339               		.cfi_offset 15, -2
 340 0002 0F93      		push r16
 341               	.LCFI8:
 342               		.cfi_def_cfa_offset 4
 343               		.cfi_offset 16, -3
 344 0004 1F93      		push r17
 345               	.LCFI9:
 346               		.cfi_def_cfa_offset 5
 347               		.cfi_offset 17, -4
 348 0006 CF93      		push r28
 349               	.LCFI10:
 350               		.cfi_def_cfa_offset 6
 351               		.cfi_offset 28, -5
 352 0008 DF93      		push r29
 353               	.LCFI11:
 354               		.cfi_def_cfa_offset 7
 355               		.cfi_offset 29, -6
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 358               	/* stack size = 5 */
 359               	.L__stack_usage = 5
 360 000a 8C01      		movw r16,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 361               		.loc 1 89 3 is_stmt 1 view .LVU72
 362               		.loc 1 89 12 is_stmt 0 view .LVU73
 363 000c FC01      		movw r30,r24
 364 000e C081      		ld r28,Z
 365 0010 D181      		ldd r29,Z+1
 366               	.LVL31:
  90:quantum/quantum.c ****   uint16_t keycode;
 367               		.loc 1 90 3 is_stmt 1 view .LVU74
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 368               		.loc 1 94 5 view .LVU75
 369               		.loc 1 94 8 is_stmt 0 view .LVU76
 370 0012 8091 0000 		lds r24,disable_action_cache
 371               	.LVL32:
 372               		.loc 1 94 8 view .LVU77
 373 0016 8111      		cpse r24,__zero_reg__
 374 0018 00C0      		rjmp .L28
 375               	.LBB6:
  95:quantum/quantum.c ****       uint8_t layer;
 376               		.loc 1 95 7 is_stmt 1 view .LVU78
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 377               		.loc 1 97 7 view .LVU79
 378               		.loc 1 97 10 is_stmt 0 view .LVU80
 379 001a 8281      		ldd r24,Z+2
 380 001c 8823      		tst r24
 381 001e 01F0      		breq .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 382               		.loc 1 98 9 is_stmt 1 view .LVU81
 383               	.LVL33:
 384               		.loc 1 98 17 is_stmt 0 view .LVU82
 385 0020 CE01      		movw r24,r28
 386 0022 0E94 0000 		call layer_switch_get_layer
 387               	.LVL34:
 388 0026 F82E      		mov r15,r24
 389               	.LVL35:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 390               		.loc 1 99 9 is_stmt 1 view .LVU83
 391 0028 682F      		mov r22,r24
 392 002a CE01      		movw r24,r28
 393 002c 0E94 0000 		call update_source_layers_cache
 394               	.LVL36:
 395               	.L30:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 396               		.loc 1 103 7 view .LVU84
 397               		.loc 1 103 17 is_stmt 0 view .LVU85
 398 0030 BE01      		movw r22,r28
 399 0032 8F2D      		mov r24,r15
 400               	.LVL37:
 401               	.L85:
 402               		.loc 1 103 17 view .LVU86
 403               	.LBE6:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 404               		.loc 1 106 15 view .LVU87
 405 0034 0E94 0000 		call keymap_key_to_keycode
 406               	.LVL38:
 407 0038 EC01      		movw r28,r24
 408               	.LVL39:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 409               		.loc 1 116 3 is_stmt 1 view .LVU88
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 410               		.loc 1 117 5 is_stmt 0 view .LVU89
 411 003a B801      		movw r22,r16
 412 003c 0E94 0000 		call process_record_kb
 413               	.LVL40:
 414               		.loc 1 117 40 view .LVU90
 415 0040 8823      		tst r24
 416 0042 01F4      		brne .+2
 417 0044 00C0      		rjmp .L27
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 418               		.loc 1 128 5 discriminator 2 view .LVU91
 419 0046 B801      		movw r22,r16
 420 0048 CE01      		movw r24,r28
 421 004a 0E94 0000 		call process_leader
 422               	.LVL41:
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 423               		.loc 1 117 40 discriminator 2 view .LVU92
 424 004e 8823      		tst r24
 425 0050 01F4      		brne .+2
 426 0052 00C0      		rjmp .L27
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 427               		.loc 1 151 3 is_stmt 1 view .LVU93
 428 0054 C531      		cpi r28,21
 429 0056 F0E7      		ldi r31,112
 430 0058 DF07      		cpc r29,r31
 431 005a 00F4      		brsh .L35
 432 005c C230      		cpi r28,2
 433 005e 80E7      		ldi r24,112
 434 0060 D807      		cpc r29,r24
 435 0062 00F0      		brlo .+2
 436 0064 00C0      		rjmp .L36
 437 0066 C115      		cp r28,__zero_reg__
 438 0068 E0E7      		ldi r30,112
 439 006a DE07      		cpc r29,r30
 440 006c 01F0      		breq .L37
 441 006e C130      		cpi r28,1
 442 0070 D047      		sbci r29,112
 443 0072 01F0      		breq .L38
 444               	.L39:
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 219:quantum/quantum.c ****             eeconfig_init();
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 223:quantum/quantum.c ****         switch (keycode)
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 230:quantum/quantum.c ****             break;
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 445               		.loc 1 339 7 view .LVU94
 446               		.loc 1 339 28 is_stmt 0 view .LVU95
 447 0074 81E0      		ldi r24,lo8(1)
 448 0076 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 449               		.loc 1 340 7 is_stmt 1 view .LVU96
 450               		.loc 1 340 28 is_stmt 0 view .LVU97
 451 007a 8093 0000 		sts shift_interrupted+1,r24
 341:quantum/quantum.c ****       break;
 452               		.loc 1 341 7 is_stmt 1 view .LVU98
 453               	.L42:
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 454               		.loc 1 345 3 view .LVU99
 455               		.loc 1 345 10 is_stmt 0 view .LVU100
 456 007e C801      		movw r24,r16
 457               	/* epilogue start */
 346:quantum/quantum.c **** }
 458               		.loc 1 346 1 view .LVU101
 459 0080 DF91      		pop r29
 460 0082 CF91      		pop r28
 461               	.LVL42:
 462               		.loc 1 346 1 view .LVU102
 463 0084 1F91      		pop r17
 464 0086 0F91      		pop r16
 465               	.LVL43:
 466               		.loc 1 346 1 view .LVU103
 467 0088 FF90      		pop r15
 345:quantum/quantum.c **** }
 468               		.loc 1 345 10 view .LVU104
 469 008a 0C94 0000 		jmp process_action_kb
 470               	.LVL44:
 471               	.L29:
 472               	.LBB7:
 101:quantum/quantum.c ****       }
 473               		.loc 1 101 9 is_stmt 1 view .LVU105
 101:quantum/quantum.c ****       }
 474               		.loc 1 101 17 is_stmt 0 view .LVU106
 475 008e CE01      		movw r24,r28
 476 0090 0E94 0000 		call read_source_layers_cache
 477               	.LVL45:
 478 0094 F82E      		mov r15,r24
 479               	.LVL46:
 101:quantum/quantum.c ****       }
 480               		.loc 1 101 17 view .LVU107
 481 0096 00C0      		rjmp .L30
 482               	.LVL47:
 483               	.L28:
 101:quantum/quantum.c ****       }
 484               		.loc 1 101 17 view .LVU108
 485               	.LBE7:
 106:quantum/quantum.c **** 
 486               		.loc 1 106 5 is_stmt 1 view .LVU109
 106:quantum/quantum.c **** 
 487               		.loc 1 106 37 is_stmt 0 view .LVU110
 488 0098 CE01      		movw r24,r28
 489 009a 0E94 0000 		call layer_switch_get_layer
 490               	.LVL48:
 106:quantum/quantum.c **** 
 491               		.loc 1 106 15 view .LVU111
 492 009e BE01      		movw r22,r28
 493 00a0 00C0      		rjmp .L85
 494               	.LVL49:
 495               	.L35:
 151:quantum/quantum.c ****     case RESET:
 496               		.loc 1 151 3 view .LVU112
 497 00a2 CC33      		cpi r28,60
 498 00a4 80E7      		ldi r24,112
 499 00a6 D807      		cpc r29,r24
 500 00a8 01F4      		brne .+2
 501 00aa 00C0      		rjmp .L40
 502 00ac CD33      		cpi r28,61
 503 00ae D047      		sbci r29,112
 504 00b0 01F4      		brne .L39
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 505               		.loc 1 317 7 is_stmt 1 view .LVU113
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 506               		.loc 1 317 24 is_stmt 0 view .LVU114
 507 00b2 F801      		movw r30,r16
 508 00b4 8281      		ldd r24,Z+2
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 509               		.loc 1 317 10 view .LVU115
 510 00b6 8823      		tst r24
 511 00b8 01F4      		brne .+2
 512 00ba 00C0      		rjmp .L69
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 513               		.loc 1 318 9 is_stmt 1 view .LVU116
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 514               		.loc 1 318 30 is_stmt 0 view .LVU117
 515 00bc 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 516               		.loc 1 319 9 is_stmt 1 view .LVU118
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 517               		.loc 1 319 21 is_stmt 0 view .LVU119
 518 00c0 0E94 0000 		call timer_read
 519               	.LVL50:
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 520               		.loc 1 319 19 view .LVU120
 521 00c4 9093 0000 		sts scs_timer+1,r25
 522 00c8 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 523               		.loc 1 320 9 is_stmt 1 view .LVU121
 524 00cc 80E2      		ldi r24,lo8(32)
 525 00ce 00C0      		rjmp .L87
 526               	.L37:
 153:quantum/quantum.c ****         reset_keyboard();
 527               		.loc 1 153 7 view .LVU122
 153:quantum/quantum.c ****         reset_keyboard();
 528               		.loc 1 153 10 is_stmt 0 view .LVU123
 529 00d0 F801      		movw r30,r16
 530 00d2 8281      		ldd r24,Z+2
 531 00d4 8111      		cpse r24,__zero_reg__
 154:quantum/quantum.c ****       }
 532               		.loc 1 154 9 is_stmt 1 view .LVU124
 533 00d6 0E94 0000 		call reset_keyboard
 534               	.LVL51:
 535               	.L27:
 536               		.loc 1 346 1 is_stmt 0 view .LVU125
 537 00da 80E0      		ldi r24,0
 538               	/* epilogue start */
 539 00dc DF91      		pop r29
 540 00de CF91      		pop r28
 541               	.LVL52:
 542               		.loc 1 346 1 view .LVU126
 543 00e0 1F91      		pop r17
 544 00e2 0F91      		pop r16
 545               	.LVL53:
 546               		.loc 1 346 1 view .LVU127
 547 00e4 FF90      		pop r15
 548 00e6 0895      		ret
 549               	.LVL54:
 550               	.L38:
 157:quantum/quantum.c ****     case DEBUG:
 551               		.loc 1 157 7 is_stmt 1 view .LVU128
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 552               		.loc 1 159 7 view .LVU129
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 553               		.loc 1 159 10 is_stmt 0 view .LVU130
 554 00e8 F801      		movw r30,r16
 555 00ea 8281      		ldd r24,Z+2
 556 00ec 8823      		tst r24
 557 00ee 01F0      		breq .L27
 160:quantum/quantum.c ****           debug_enable = true;
 558               		.loc 1 160 39 is_stmt 1 view .LVU131
 161:quantum/quantum.c ****       }
 559               		.loc 1 161 11 view .LVU132
 161:quantum/quantum.c ****       }
 560               		.loc 1 161 24 is_stmt 0 view .LVU133
 561 00f0 8091 0000 		lds r24,debug_config
 562 00f4 8160      		ori r24,lo8(1<<0)
 563 00f6 8093 0000 		sts debug_config,r24
 564 00fa 00C0      		rjmp .L27
 565               	.L36:
 164:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 566               		.loc 1 164 7 is_stmt 1 view .LVU134
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 567               		.loc 1 216 7 view .LVU135
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 568               		.loc 1 216 10 is_stmt 0 view .LVU136
 569 00fc F801      		movw r30,r16
 570 00fe 8281      		ldd r24,Z+2
 571 0100 8823      		tst r24
 572 0102 01F4      		brne .+2
 573 0104 00C0      		rjmp .L42
 218:quantum/quantum.c ****             eeconfig_init();
 574               		.loc 1 218 9 is_stmt 1 view .LVU137
 218:quantum/quantum.c ****             eeconfig_init();
 575               		.loc 1 218 14 is_stmt 0 view .LVU138
 576 0106 0E94 0000 		call eeconfig_is_enabled
 577               	.LVL55:
 218:quantum/quantum.c ****             eeconfig_init();
 578               		.loc 1 218 12 view .LVU139
 579 010a 8111      		cpse r24,__zero_reg__
 580 010c 00C0      		rjmp .L43
 219:quantum/quantum.c ****         }
 581               		.loc 1 219 13 is_stmt 1 view .LVU140
 582 010e 0E94 0000 		call eeconfig_init
 583               	.LVL56:
 584               	.L43:
 222:quantum/quantum.c ****         switch (keycode)
 585               		.loc 1 222 9 view .LVU141
 222:quantum/quantum.c ****         switch (keycode)
 586               		.loc 1 222 29 is_stmt 0 view .LVU142
 587 0112 0E94 0000 		call eeconfig_read_keymap
 588               	.LVL57:
 589 0116 90E0      		ldi r25,0
 590 0118 9093 0000 		sts keymap_config+1,r25
 591 011c 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         {
 592               		.loc 1 223 9 is_stmt 1 view .LVU143
 593 0120 FE01      		movw r30,r28
 594 0122 E350      		subi r30,3
 595 0124 F047      		sbci r31,112
 226:quantum/quantum.c ****             break;
 596               		.loc 1 226 49 is_stmt 0 view .LVU144
 597 0126 8091 0000 		lds r24,keymap_config
 598 012a 8160      		ori r24,lo8(1<<0)
 599 012c E231      		cpi r30,18
 600 012e F105      		cpc r31,__zero_reg__
 601 0130 00F4      		brsh .L86
 602 0132 E050      		subi r30,lo8(-(gs(.L46)))
 603 0134 F040      		sbci r31,hi8(-(gs(.L46)))
 604 0136 0C94 0000 		jmp __tablejump2__
 605               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 606               		.p2align	1
 607               	.L46:
 608 0000 0000      		.word gs(.L63)
 609 0002 0000      		.word gs(.L62)
 610 0004 0000      		.word gs(.L61)
 611 0006 0000      		.word gs(.L60)
 612 0008 0000      		.word gs(.L59)
 613 000a 0000      		.word gs(.L58)
 614 000c 0000      		.word gs(.L57)
 615 000e 0000      		.word gs(.L56)
 616 0010 0000      		.word gs(.L55)
 617 0012 0000      		.word gs(.L54)
 618 0014 0000      		.word gs(.L53)
 619 0016 0000      		.word gs(.L52)
 620 0018 0000      		.word gs(.L51)
 621 001a 0000      		.word gs(.L50)
 622 001c 0000      		.word gs(.L49)
 623 001e 0000      		.word gs(.L48)
 624 0020 0000      		.word gs(.L47)
 625 0022 0000      		.word gs(.L45)
 626               		.section	.text.process_record_quantum
 627               	.L63:
 229:quantum/quantum.c ****             break;
 628               		.loc 1 229 13 is_stmt 1 view .LVU145
 229:quantum/quantum.c ****             break;
 629               		.loc 1 229 47 is_stmt 0 view .LVU146
 630 013a 8091 0000 		lds r24,keymap_config
 631 013e 8260      		ori r24,lo8(1<<1)
 632               	.L86:
 282:quantum/quantum.c ****             break;
 633               		.loc 1 282 32 view .LVU147
 634 0140 8093 0000 		sts keymap_config,r24
 283:quantum/quantum.c ****           default:
 635               		.loc 1 283 13 is_stmt 1 view .LVU148
 287:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 636               		.loc 1 287 9 view .LVU149
 637 0144 8091 0000 		lds r24,keymap_config
 638 0148 0E94 0000 		call eeconfig_update_keymap
 639               	.LVL58:
 288:quantum/quantum.c **** 
 640               		.loc 1 288 9 view .LVU150
 641 014c 0E94 0000 		call clear_keyboard
 642               	.LVL59:
 290:quantum/quantum.c ****       }
 643               		.loc 1 290 9 view .LVU151
 290:quantum/quantum.c ****       }
 644               		.loc 1 290 16 is_stmt 0 view .LVU152
 645 0150 00C0      		rjmp .L27
 646               	.L62:
 232:quantum/quantum.c ****             break;
 647               		.loc 1 232 13 is_stmt 1 view .LVU153
 232:quantum/quantum.c ****             break;
 648               		.loc 1 232 42 is_stmt 0 view .LVU154
 649 0152 8091 0000 		lds r24,keymap_config
 650 0156 8460      		ori r24,lo8(1<<2)
 651 0158 00C0      		rjmp .L86
 652               	.L61:
 235:quantum/quantum.c ****             break;
 653               		.loc 1 235 13 is_stmt 1 view .LVU155
 235:quantum/quantum.c ****             break;
 654               		.loc 1 235 42 is_stmt 0 view .LVU156
 655 015a 8091 0000 		lds r24,keymap_config
 656 015e 8860      		ori r24,lo8(1<<3)
 657 0160 00C0      		rjmp .L86
 658               	.L60:
 238:quantum/quantum.c ****             break;
 659               		.loc 1 238 13 is_stmt 1 view .LVU157
 238:quantum/quantum.c ****             break;
 660               		.loc 1 238 34 is_stmt 0 view .LVU158
 661 0162 8091 0000 		lds r24,keymap_config
 662 0166 8061      		ori r24,lo8(1<<4)
 663 0168 00C0      		rjmp .L86
 664               	.L59:
 241:quantum/quantum.c ****             break;
 665               		.loc 1 241 13 is_stmt 1 view .LVU159
 241:quantum/quantum.c ****             break;
 666               		.loc 1 241 42 is_stmt 0 view .LVU160
 667 016a 8091 0000 		lds r24,keymap_config
 668 016e 8062      		ori r24,lo8(1<<5)
 669 0170 00C0      		rjmp .L86
 670               	.L58:
 244:quantum/quantum.c ****             break;
 671               		.loc 1 244 13 is_stmt 1 view .LVU161
 244:quantum/quantum.c ****             break;
 672               		.loc 1 244 52 is_stmt 0 view .LVU162
 673 0172 8091 0000 		lds r24,keymap_config
 674 0176 8064      		ori r24,lo8(1<<6)
 675 0178 00C0      		rjmp .L86
 676               	.L57:
 247:quantum/quantum.c ****             break;
 677               		.loc 1 247 13 is_stmt 1 view .LVU163
 247:quantum/quantum.c ****             break;
 678               		.loc 1 247 32 is_stmt 0 view .LVU164
 679 017a 8091 0000 		lds r24,keymap_config
 680 017e 8068      		ori r24,lo8(1<<7)
 681 0180 00C0      		rjmp .L86
 682               	.L56:
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 683               		.loc 1 250 13 is_stmt 1 view .LVU165
 251:quantum/quantum.c ****             break;
 684               		.loc 1 251 13 view .LVU166
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 685               		.loc 1 250 42 is_stmt 0 view .LVU167
 686 0182 8091 0000 		lds r24,keymap_config
 687 0186 8C60      		ori r24,lo8(12)
 688 0188 00C0      		rjmp .L86
 689               	.L55:
 254:quantum/quantum.c ****             break;
 690               		.loc 1 254 13 is_stmt 1 view .LVU168
 254:quantum/quantum.c ****             break;
 691               		.loc 1 254 49 is_stmt 0 view .LVU169
 692 018a 8091 0000 		lds r24,keymap_config
 693 018e 8E7F      		andi r24,lo8(~(1<<0))
 694 0190 00C0      		rjmp .L86
 695               	.L54:
 257:quantum/quantum.c ****             break;
 696               		.loc 1 257 13 is_stmt 1 view .LVU170
 257:quantum/quantum.c ****             break;
 697               		.loc 1 257 47 is_stmt 0 view .LVU171
 698 0192 8091 0000 		lds r24,keymap_config
 699 0196 8D7F      		andi r24,lo8(~(1<<1))
 700 0198 00C0      		rjmp .L86
 701               	.L53:
 260:quantum/quantum.c ****             break;
 702               		.loc 1 260 13 is_stmt 1 view .LVU172
 260:quantum/quantum.c ****             break;
 703               		.loc 1 260 42 is_stmt 0 view .LVU173
 704 019a 8091 0000 		lds r24,keymap_config
 705 019e 8B7F      		andi r24,lo8(~(1<<2))
 706 01a0 00C0      		rjmp .L86
 707               	.L52:
 263:quantum/quantum.c ****             break;
 708               		.loc 1 263 13 is_stmt 1 view .LVU174
 263:quantum/quantum.c ****             break;
 709               		.loc 1 263 42 is_stmt 0 view .LVU175
 710 01a2 8091 0000 		lds r24,keymap_config
 711 01a6 877F      		andi r24,lo8(~(1<<3))
 712 01a8 00C0      		rjmp .L86
 713               	.L51:
 266:quantum/quantum.c ****             break;
 714               		.loc 1 266 13 is_stmt 1 view .LVU176
 266:quantum/quantum.c ****             break;
 715               		.loc 1 266 34 is_stmt 0 view .LVU177
 716 01aa 8091 0000 		lds r24,keymap_config
 717 01ae 8F7E      		andi r24,lo8(~(1<<4))
 718 01b0 00C0      		rjmp .L86
 719               	.L50:
 269:quantum/quantum.c ****             break;
 720               		.loc 1 269 13 is_stmt 1 view .LVU178
 269:quantum/quantum.c ****             break;
 721               		.loc 1 269 42 is_stmt 0 view .LVU179
 722 01b2 8091 0000 		lds r24,keymap_config
 723 01b6 8F7D      		andi r24,lo8(~(1<<5))
 724 01b8 00C0      		rjmp .L86
 725               	.L49:
 272:quantum/quantum.c ****             break;
 726               		.loc 1 272 13 is_stmt 1 view .LVU180
 272:quantum/quantum.c ****             break;
 727               		.loc 1 272 52 is_stmt 0 view .LVU181
 728 01ba 8091 0000 		lds r24,keymap_config
 729 01be 8F7B      		andi r24,lo8(~(1<<6))
 730 01c0 00C0      		rjmp .L86
 731               	.L48:
 275:quantum/quantum.c ****             break;
 732               		.loc 1 275 13 is_stmt 1 view .LVU182
 275:quantum/quantum.c ****             break;
 733               		.loc 1 275 32 is_stmt 0 view .LVU183
 734 01c2 8091 0000 		lds r24,keymap_config
 735 01c6 8F77      		andi r24,lo8(~(1<<7))
 736 01c8 00C0      		rjmp .L86
 737               	.L47:
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 738               		.loc 1 278 13 is_stmt 1 view .LVU184
 279:quantum/quantum.c ****             break;
 739               		.loc 1 279 13 view .LVU185
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 740               		.loc 1 278 42 is_stmt 0 view .LVU186
 741 01ca 8091 0000 		lds r24,keymap_config
 742 01ce 837F      		andi r24,lo8(-13)
 743 01d0 00C0      		rjmp .L86
 744               	.L45:
 282:quantum/quantum.c ****             break;
 745               		.loc 1 282 13 is_stmt 1 view .LVU187
 282:quantum/quantum.c ****             break;
 746               		.loc 1 282 48 is_stmt 0 view .LVU188
 747 01d2 9091 0000 		lds r25,keymap_config
 282:quantum/quantum.c ****             break;
 748               		.loc 1 282 32 view .LVU189
 749 01d6 892F      		mov r24,r25
 750 01d8 97FB      		bst r25,7
 751 01da 87F9      		bld r24,7
 752 01dc 8058      		subi r24,0x80
 753 01de 00C0      		rjmp .L86
 754               	.L40:
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 755               		.loc 1 294 7 is_stmt 1 view .LVU190
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 756               		.loc 1 294 24 is_stmt 0 view .LVU191
 757 01e0 F801      		movw r30,r16
 758 01e2 8281      		ldd r24,Z+2
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 759               		.loc 1 294 10 view .LVU192
 760 01e4 8823      		tst r24
 761 01e6 01F0      		breq .L65
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 762               		.loc 1 295 9 is_stmt 1 view .LVU193
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 763               		.loc 1 295 30 is_stmt 0 view .LVU194
 764 01e8 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 765               		.loc 1 296 9 is_stmt 1 view .LVU195
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 766               		.loc 1 296 21 is_stmt 0 view .LVU196
 767 01ec 0E94 0000 		call timer_read
 768               	.LVL60:
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 769               		.loc 1 296 19 view .LVU197
 770 01f0 9093 0000 		sts scs_timer+1,r25
 771 01f4 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 772               		.loc 1 297 9 is_stmt 1 view .LVU198
 773 01f8 82E0      		ldi r24,lo8(2)
 774               	.L87:
 320:quantum/quantum.c ****       }
 775               		.loc 1 320 9 is_stmt 0 view .LVU199
 776 01fa 0E94 0000 		call register_mods
 777               	.LVL61:
 778 01fe 00C0      		rjmp .L27
 779               	.L65:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 780               		.loc 1 306 9 is_stmt 1 view .LVU200
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 781               		.loc 1 306 12 is_stmt 0 view .LVU201
 782 0200 8091 0000 		lds r24,shift_interrupted
 783 0204 8111      		cpse r24,__zero_reg__
 784 0206 00C0      		rjmp .L67
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 785               		.loc 1 306 38 discriminator 1 view .LVU202
 786 0208 8091 0000 		lds r24,scs_timer
 787 020c 9091 0000 		lds r25,scs_timer+1
 788 0210 0E94 0000 		call timer_elapsed
 789               	.LVL62:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 790               		.loc 1 306 35 discriminator 1 view .LVU203
 791 0214 883C      		cpi r24,-56
 792 0216 9105      		cpc r25,__zero_reg__
 793 0218 00F4      		brsh .L67
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 794               		.loc 1 307 11 is_stmt 1 view .LVU204
 795 021a 86E2      		ldi r24,lo8(38)
 796 021c 0E94 0000 		call register_code
 797               	.LVL63:
 308:quantum/quantum.c ****         }
 798               		.loc 1 308 11 view .LVU205
 799 0220 86E2      		ldi r24,lo8(38)
 800 0222 0E94 0000 		call unregister_code
 801               	.LVL64:
 802               	.L67:
 310:quantum/quantum.c ****       }
 803               		.loc 1 310 9 view .LVU206
 804 0226 82E0      		ldi r24,lo8(2)
 805               	.L88:
 333:quantum/quantum.c ****       }
 806               		.loc 1 333 9 is_stmt 0 view .LVU207
 807 0228 0E94 0000 		call unregister_mods
 808               	.LVL65:
 809 022c 00C0      		rjmp .L27
 810               	.L69:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 811               		.loc 1 329 9 is_stmt 1 view .LVU208
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 812               		.loc 1 329 12 is_stmt 0 view .LVU209
 813 022e 8091 0000 		lds r24,shift_interrupted+1
 814 0232 8111      		cpse r24,__zero_reg__
 815 0234 00C0      		rjmp .L71
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 816               		.loc 1 329 38 discriminator 1 view .LVU210
 817 0236 8091 0000 		lds r24,scs_timer
 818 023a 9091 0000 		lds r25,scs_timer+1
 819 023e 0E94 0000 		call timer_elapsed
 820               	.LVL66:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 821               		.loc 1 329 35 discriminator 1 view .LVU211
 822 0242 883C      		cpi r24,-56
 823 0244 9105      		cpc r25,__zero_reg__
 824 0246 00F4      		brsh .L71
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 825               		.loc 1 330 11 is_stmt 1 view .LVU212
 826 0248 87E2      		ldi r24,lo8(39)
 827 024a 0E94 0000 		call register_code
 828               	.LVL67:
 331:quantum/quantum.c ****         }
 829               		.loc 1 331 11 view .LVU213
 830 024e 87E2      		ldi r24,lo8(39)
 831 0250 0E94 0000 		call unregister_code
 832               	.LVL68:
 833               	.L71:
 333:quantum/quantum.c ****       }
 834               		.loc 1 333 9 view .LVU214
 835 0254 80E2      		ldi r24,lo8(32)
 836 0256 00C0      		rjmp .L88
 837               		.cfi_endproc
 838               	.LFE114:
 840               		.section	.text.send_string,"ax",@progbits
 841               	.global	send_string
 843               	send_string:
 844               	.LVL69:
 845               	.LFB115:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 846               		.loc 1 430 35 view -0
 847               		.cfi_startproc
 848               		.loc 1 430 35 is_stmt 0 view .LVU216
 849 0000 0F93      		push r16
 850               	.LCFI12:
 851               		.cfi_def_cfa_offset 3
 852               		.cfi_offset 16, -2
 853 0002 1F93      		push r17
 854               	.LCFI13:
 855               		.cfi_def_cfa_offset 4
 856               		.cfi_offset 17, -3
 857 0004 CF93      		push r28
 858               	.LCFI14:
 859               		.cfi_def_cfa_offset 5
 860               		.cfi_offset 28, -4
 861               	/* prologue: function */
 862               	/* frame size = 0 */
 863               	/* stack size = 3 */
 864               	.L__stack_usage = 3
 865 0006 8C01      		movw r16,r24
 866               	.LVL70:
 867               	.L93:
 431:quantum/quantum.c ****     while (1) {
 868               		.loc 1 431 5 is_stmt 1 view .LVU217
 869               	.LBB8:
 432:quantum/quantum.c ****         uint8_t keycode;
 870               		.loc 1 432 9 view .LVU218
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 871               		.loc 1 433 9 view .LVU219
 872               	.LBB9:
 873               		.loc 1 433 30 view .LVU220
 874               		.loc 1 433 30 view .LVU221
 875               		.loc 1 433 30 view .LVU222
 876 0008 F801      		movw r30,r16
 877               	/* #APP */
 878               	 ;  433 "quantum/quantum.c" 1
 879 000a 2491      		lpm r18, Z
 880               		
 881               	 ;  0 "" 2
 882               	.LVL71:
 883               		.loc 1 433 30 view .LVU223
 884               		.loc 1 433 30 is_stmt 0 view .LVU224
 885               	/* #NOAPP */
 886               	.LBE9:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 887               		.loc 1 434 9 is_stmt 1 view .LVU225
 888               		.loc 1 434 12 is_stmt 0 view .LVU226
 889 000c 2223      		tst r18
 890 000e 01F0      		breq .L89
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 891               		.loc 1 435 9 is_stmt 1 view .LVU227
 892               	.LBB10:
 893               		.loc 1 435 19 view .LVU228
 894 0010 30E0      		ldi r19,0
 895               	.LVL72:
 896               		.loc 1 435 19 view .LVU229
 897               		.loc 1 435 19 view .LVU230
 898 0012 F901      		movw r30,r18
 899 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 900 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 901               	.LVL73:
 902               		.loc 1 435 19 is_stmt 0 view .LVU231
 903               	/* #APP */
 904               	 ;  435 "quantum/quantum.c" 1
 905 0018 C491      		lpm r28, Z
 906               		
 907               	 ;  0 "" 2
 908               	.LVL74:
 909               		.loc 1 435 19 is_stmt 1 view .LVU232
 910               		.loc 1 435 19 is_stmt 0 view .LVU233
 911               	/* #NOAPP */
 912               	.LBE10:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 913               		.loc 1 436 9 is_stmt 1 view .LVU234
 914               	.LBB11:
 915               		.loc 1 436 13 view .LVU235
 916               		.loc 1 436 13 view .LVU236
 917               		.loc 1 436 13 view .LVU237
 918 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 919 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 920               	.LVL75:
 921               		.loc 1 436 13 is_stmt 0 view .LVU238
 922 001e F901      		movw r30,r18
 923               	.LVL76:
 924               		.loc 1 436 13 view .LVU239
 925               	/* #APP */
 926               	 ;  436 "quantum/quantum.c" 1
 927 0020 2491      		lpm r18, Z
 928               		
 929               	 ;  0 "" 2
 930               	.LVL77:
 931               		.loc 1 436 13 is_stmt 1 view .LVU240
 932               	/* #NOAPP */
 933               	.LBE11:
 934               		.loc 1 436 12 is_stmt 0 view .LVU241
 935 0022 2223      		tst r18
 936 0024 01F0      		breq .L91
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 937               		.loc 1 437 13 is_stmt 1 view .LVU242
 938 0026 81EE      		ldi r24,lo8(-31)
 939 0028 0E94 0000 		call register_code
 940               	.LVL78:
 438:quantum/quantum.c ****             register_code(keycode);
 941               		.loc 1 438 13 view .LVU243
 942 002c 8C2F      		mov r24,r28
 943 002e 0E94 0000 		call register_code
 944               	.LVL79:
 439:quantum/quantum.c ****             unregister_code(keycode);
 945               		.loc 1 439 13 view .LVU244
 946 0032 8C2F      		mov r24,r28
 947 0034 0E94 0000 		call unregister_code
 948               	.LVL80:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 949               		.loc 1 440 13 view .LVU245
 950 0038 81EE      		ldi r24,lo8(-31)
 951               	.L94:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 444:quantum/quantum.c ****             unregister_code(keycode);
 952               		.loc 1 444 13 is_stmt 0 view .LVU246
 953 003a 0E94 0000 		call unregister_code
 954               	.LVL81:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 955               		.loc 1 446 9 is_stmt 1 view .LVU247
 956 003e 0F5F      		subi r16,-1
 957 0040 1F4F      		sbci r17,-1
 958               	.LVL82:
 959               		.loc 1 446 9 is_stmt 0 view .LVU248
 960               	.LBE8:
 431:quantum/quantum.c ****         uint8_t keycode;
 961               		.loc 1 431 15 view .LVU249
 962 0042 00C0      		rjmp .L93
 963               	.LVL83:
 964               	.L91:
 965               	.LBB12:
 443:quantum/quantum.c ****             unregister_code(keycode);
 966               		.loc 1 443 13 is_stmt 1 view .LVU250
 967 0044 8C2F      		mov r24,r28
 968 0046 0E94 0000 		call register_code
 969               	.LVL84:
 444:quantum/quantum.c ****         }
 970               		.loc 1 444 13 view .LVU251
 971 004a 8C2F      		mov r24,r28
 972 004c 00C0      		rjmp .L94
 973               	.LVL85:
 974               	.L89:
 975               	/* epilogue start */
 444:quantum/quantum.c ****         }
 976               		.loc 1 444 13 is_stmt 0 view .LVU252
 977               	.LBE12:
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c **** }
 978               		.loc 1 448 1 view .LVU253
 979 004e CF91      		pop r28
 980 0050 1F91      		pop r17
 981 0052 0F91      		pop r16
 982               	.LVL86:
 983               		.loc 1 448 1 view .LVU254
 984 0054 0895      		ret
 985               		.cfi_endproc
 986               	.LFE115:
 988               		.section	.text.update_tri_layer,"ax",@progbits
 989               	.global	update_tri_layer
 991               	update_tri_layer:
 992               	.LVL87:
 993               	.LFB116:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 994               		.loc 1 450 71 is_stmt 1 view -0
 995               		.cfi_startproc
 996               		.loc 1 450 71 is_stmt 0 view .LVU256
 997 0000 8F92      		push r8
 998               	.LCFI15:
 999               		.cfi_def_cfa_offset 3
 1000               		.cfi_offset 8, -2
 1001 0002 9F92      		push r9
 1002               	.LCFI16:
 1003               		.cfi_def_cfa_offset 4
 1004               		.cfi_offset 9, -3
 1005 0004 AF92      		push r10
 1006               	.LCFI17:
 1007               		.cfi_def_cfa_offset 5
 1008               		.cfi_offset 10, -4
 1009 0006 BF92      		push r11
 1010               	.LCFI18:
 1011               		.cfi_def_cfa_offset 6
 1012               		.cfi_offset 11, -5
 1013 0008 CF92      		push r12
 1014               	.LCFI19:
 1015               		.cfi_def_cfa_offset 7
 1016               		.cfi_offset 12, -6
 1017 000a DF92      		push r13
 1018               	.LCFI20:
 1019               		.cfi_def_cfa_offset 8
 1020               		.cfi_offset 13, -7
 1021 000c EF92      		push r14
 1022               	.LCFI21:
 1023               		.cfi_def_cfa_offset 9
 1024               		.cfi_offset 14, -8
 1025 000e FF92      		push r15
 1026               	.LCFI22:
 1027               		.cfi_def_cfa_offset 10
 1028               		.cfi_offset 15, -9
 1029 0010 0F93      		push r16
 1030               	.LCFI23:
 1031               		.cfi_def_cfa_offset 11
 1032               		.cfi_offset 16, -10
 1033 0012 1F93      		push r17
 1034               	.LCFI24:
 1035               		.cfi_def_cfa_offset 12
 1036               		.cfi_offset 17, -11
 1037               	/* prologue: function */
 1038               	/* frame size = 0 */
 1039               	/* stack size = 10 */
 1040               	.L__stack_usage = 10
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1041               		.loc 1 451 3 is_stmt 1 view .LVU257
 1042 0014 C12C      		mov r12,__zero_reg__
 1043 0016 D12C      		mov r13,__zero_reg__
 1044 0018 7601      		movw r14,r12
 1045 001a C394      		inc r12
 1046 001c 9701      		movw r18,r14
 1047 001e 8601      		movw r16,r12
 1048 0020 00C0      		rjmp 2f
 1049               		1:
 1050 0022 000F      		lsl r16
 1051 0024 111F      		rol r17
 1052 0026 221F      		rol r18
 1053 0028 331F      		rol r19
 1054               		2:
 1055 002a 6A95      		dec r22
 1056 002c 02F4      		brpl 1b
 1057 002e 4601      		movw r8,r12
 1058 0030 5701      		movw r10,r14
 1059 0032 00C0      		rjmp 2f
 1060               		1:
 1061 0034 880C      		lsl r8
 1062 0036 991C      		rol r9
 1063 0038 AA1C      		rol r10
 1064 003a BB1C      		rol r11
 1065               		2:
 1066 003c 8A95      		dec r24
 1067 003e 02F4      		brpl 1b
 1068 0040 D501      		movw r26,r10
 1069 0042 C401      		movw r24,r8
 1070               	.LVL88:
 1071               		.loc 1 451 3 is_stmt 0 view .LVU258
 1072 0044 802B      		or r24,r16
 1073 0046 912B      		or r25,r17
 1074 0048 A22B      		or r26,r18
 1075 004a B32B      		or r27,r19
 1076               		.loc 1 451 27 view .LVU259
 1077 004c 0091 0000 		lds r16,layer_state
 1078 0050 1091 0000 		lds r17,layer_state+1
 1079 0054 2091 0000 		lds r18,layer_state+2
 1080 0058 3091 0000 		lds r19,layer_state+3
 1081 005c 0823      		and r16,r24
 1082 005e 1923      		and r17,r25
 1083 0060 2A23      		and r18,r26
 1084 0062 3B23      		and r19,r27
 1085 0064 8017      		cp r24,r16
 1086 0066 9107      		cpc r25,r17
 1087 0068 A207      		cpc r26,r18
 1088 006a B307      		cpc r27,r19
 1089 006c 01F4      		brne .L96
 452:quantum/quantum.c ****     layer_on(layer3);
 1090               		.loc 1 452 5 is_stmt 1 view .LVU260
 1091 006e 842F      		mov r24,r20
 1092               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 1093               		.loc 1 456 1 is_stmt 0 view .LVU261
 1094 0070 1F91      		pop r17
 1095 0072 0F91      		pop r16
 1096 0074 FF90      		pop r15
 1097 0076 EF90      		pop r14
 1098 0078 DF90      		pop r13
 1099 007a CF90      		pop r12
 1100 007c BF90      		pop r11
 1101 007e AF90      		pop r10
 1102 0080 9F90      		pop r9
 1103 0082 8F90      		pop r8
 452:quantum/quantum.c ****     layer_on(layer3);
 1104               		.loc 1 452 5 view .LVU262
 1105 0084 0C94 0000 		jmp layer_on
 1106               	.LVL89:
 1107               	.L96:
 454:quantum/quantum.c ****   }
 1108               		.loc 1 454 5 is_stmt 1 view .LVU263
 1109 0088 842F      		mov r24,r20
 1110               	/* epilogue start */
 1111               		.loc 1 456 1 is_stmt 0 view .LVU264
 1112 008a 1F91      		pop r17
 1113 008c 0F91      		pop r16
 1114 008e FF90      		pop r15
 1115 0090 EF90      		pop r14
 1116 0092 DF90      		pop r13
 1117 0094 CF90      		pop r12
 1118 0096 BF90      		pop r11
 1119 0098 AF90      		pop r10
 1120 009a 9F90      		pop r9
 1121 009c 8F90      		pop r8
 454:quantum/quantum.c ****   }
 1122               		.loc 1 454 5 view .LVU265
 1123 009e 0C94 0000 		jmp layer_off
 1124               	.LVL90:
 454:quantum/quantum.c ****   }
 1125               		.loc 1 454 5 view .LVU266
 1126               		.cfi_endproc
 1127               	.LFE116:
 1129               		.section	.text.tap_random_base64,"ax",@progbits
 1130               	.global	tap_random_base64
 1132               	tap_random_base64:
 1133               	.LFB117:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 1134               		.loc 1 458 30 is_stmt 1 view -0
 1135               		.cfi_startproc
 1136 0000 CF93      		push r28
 1137               	.LCFI25:
 1138               		.cfi_def_cfa_offset 3
 1139               		.cfi_offset 28, -2
 1140 0002 DF93      		push r29
 1141               	.LCFI26:
 1142               		.cfi_def_cfa_offset 4
 1143               		.cfi_offset 29, -3
 1144               	/* prologue: function */
 1145               	/* frame size = 0 */
 1146               	/* stack size = 2 */
 1147               	.L__stack_usage = 2
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1148               		.loc 1 460 5 view .LVU268
 1149               		.loc 1 460 20 is_stmt 0 view .LVU269
 1150 0004 46B5      		in r20,0x26
 1151               		.loc 1 460 28 view .LVU270
 1152 0006 2091 8400 		lds r18,132
 1153 000a 3091 8500 		lds r19,132+1
 1154               		.loc 1 460 36 view .LVU271
 1155 000e C091 9400 		lds r28,148
 1156 0012 D091 9500 		lds r29,148+1
 1157               		.loc 1 460 44 view .LVU272
 1158 0016 8091 BE00 		lds r24,190
 1159 001a 9091 BF00 		lds r25,190+1
 1160               		.loc 1 460 34 view .LVU273
 1161 001e C20F      		add r28,r18
 1162 0020 C40F      		add r28,r20
 1163               		.loc 1 460 42 view .LVU274
 1164 0022 C80F      		add r28,r24
 1165               		.loc 1 460 13 view .LVU275
 1166 0024 CF73      		andi r28,lo8(63)
 1167               	.LVL91:
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1168               		.loc 1 464 3 is_stmt 1 view .LVU276
 1169 0026 CE33      		cpi r28,lo8(62)
 1170 0028 00F4      		brsh .L98
 1171 002a C533      		cpi r28,lo8(53)
 1172 002c 00F4      		brsh .L99
 1173 002e CA31      		cpi r28,lo8(26)
 1174 0030 00F0      		brlo .L100
 1175 0032 C433      		cpi r28,lo8(52)
 1176 0034 00F4      		brsh .L105
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 467:quantum/quantum.c ****       register_code(key + KC_A);
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1177               		.loc 1 472 7 view .LVU277
 1178 0036 C651      		subi r28,lo8(-(-22))
 1179               	.LVL92:
 1180               	.L108:
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 477:quantum/quantum.c ****       unregister_code(KC_0);
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1181               		.loc 1 480 7 is_stmt 0 view .LVU278
 1182 0038 8C2F      		mov r24,r28
 1183 003a 0E94 0000 		call register_code
 1184               	.LVL93:
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1185               		.loc 1 481 7 is_stmt 1 view .LVU279
 1186 003e 8C2F      		mov r24,r28
 1187 0040 00C0      		rjmp .L106
 1188               	.LVL94:
 1189               	.L98:
 464:quantum/quantum.c ****     case 0 ... 25:
 1190               		.loc 1 464 3 is_stmt 0 view .LVU280
 1191 0042 CE33      		cpi r28,lo8(62)
 1192 0044 01F0      		breq .L103
 1193 0046 CF33      		cpi r28,lo8(63)
 1194 0048 01F0      		breq .L104
 1195               	.L100:
 466:quantum/quantum.c ****       register_code(key + KC_A);
 1196               		.loc 1 466 7 is_stmt 1 view .LVU281
 1197 004a 81EE      		ldi r24,lo8(-31)
 1198 004c 0E94 0000 		call register_code
 1199               	.LVL95:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1200               		.loc 1 467 7 view .LVU282
 1201 0050 CC5F      		subi r28,lo8(-(4))
 1202               	.LVL96:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1203               		.loc 1 467 7 is_stmt 0 view .LVU283
 1204 0052 8C2F      		mov r24,r28
 1205 0054 0E94 0000 		call register_code
 1206               	.LVL97:
 468:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1207               		.loc 1 468 7 is_stmt 1 view .LVU284
 1208 0058 8C2F      		mov r24,r28
 1209               	.LVL98:
 1210               	.L107:
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 485:quantum/quantum.c ****       register_code(KC_EQL);
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1211               		.loc 1 486 7 is_stmt 0 view .LVU285
 1212 005a 0E94 0000 		call unregister_code
 1213               	.LVL99:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1214               		.loc 1 487 7 is_stmt 1 view .LVU286
 1215 005e 81EE      		ldi r24,lo8(-31)
 1216 0060 00C0      		rjmp .L106
 1217               	.LVL100:
 1218               	.L105:
 476:quantum/quantum.c ****       unregister_code(KC_0);
 1219               		.loc 1 476 7 view .LVU287
 1220 0062 87E2      		ldi r24,lo8(39)
 1221 0064 0E94 0000 		call register_code
 1222               	.LVL101:
 477:quantum/quantum.c ****       break;
 1223               		.loc 1 477 7 view .LVU288
 1224 0068 87E2      		ldi r24,lo8(39)
 1225               	.LVL102:
 1226               	.L106:
 1227               	/* epilogue start */
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1228               		.loc 1 494 1 is_stmt 0 view .LVU289
 1229 006a DF91      		pop r29
 1230 006c CF91      		pop r28
 491:quantum/quantum.c ****       break;
 1231               		.loc 1 491 7 view .LVU290
 1232 006e 0C94 0000 		jmp unregister_code
 1233               	.LVL103:
 1234               	.L99:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1235               		.loc 1 480 7 is_stmt 1 view .LVU291
 1236 0072 C751      		subi r28,lo8(-(-23))
 1237               	.LVL104:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1238               		.loc 1 480 7 is_stmt 0 view .LVU292
 1239 0074 00C0      		rjmp .L108
 1240               	.LVL105:
 1241               	.L103:
 484:quantum/quantum.c ****       register_code(KC_EQL);
 1242               		.loc 1 484 7 is_stmt 1 view .LVU293
 1243 0076 81EE      		ldi r24,lo8(-31)
 1244 0078 0E94 0000 		call register_code
 1245               	.LVL106:
 485:quantum/quantum.c ****       unregister_code(KC_EQL);
 1246               		.loc 1 485 7 view .LVU294
 1247 007c 8EE2      		ldi r24,lo8(46)
 1248 007e 0E94 0000 		call register_code
 1249               	.LVL107:
 486:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1250               		.loc 1 486 7 view .LVU295
 1251 0082 8EE2      		ldi r24,lo8(46)
 1252 0084 00C0      		rjmp .L107
 1253               	.L104:
 490:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1254               		.loc 1 490 7 view .LVU296
 1255 0086 88E3      		ldi r24,lo8(56)
 1256 0088 0E94 0000 		call register_code
 1257               	.LVL108:
 491:quantum/quantum.c ****       break;
 1258               		.loc 1 491 7 view .LVU297
 1259 008c 88E3      		ldi r24,lo8(56)
 1260 008e 00C0      		rjmp .L106
 1261               		.cfi_endproc
 1262               	.LFE117:
 1264               		.section	.text.matrix_init_quantum,"ax",@progbits
 1265               	.global	matrix_init_quantum
 1267               	matrix_init_quantum:
 1268               	.LFB118:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 1269               		.loc 1 496 28 view -0
 1270               		.cfi_startproc
 1271               	/* prologue: function */
 1272               	/* frame size = 0 */
 1273               	/* stack size = 0 */
 1274               	.L__stack_usage = 0
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 1275               		.loc 1 500 3 view .LVU299
 1276 0000 0C94 0000 		jmp matrix_init_kb
 1277               	.LVL109:
 1278               		.cfi_endproc
 1279               	.LFE118:
 1281               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1282               	.global	matrix_scan_quantum
 1284               	matrix_scan_quantum:
 1285               	.LFB119:
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1286               		.loc 1 503 28 view -0
 1287               		.cfi_startproc
 1288               	/* prologue: function */
 1289               	/* frame size = 0 */
 1290               	/* stack size = 0 */
 1291               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1292               		.loc 1 511 3 view .LVU301
 1293 0000 0C94 0000 		jmp matrix_scan_kb
 1294               	.LVL110:
 1295               		.cfi_endproc
 1296               	.LFE119:
 1298               		.section	.text.backlight_init_ports,"ax",@progbits
 1299               		.weak	backlight_init_ports
 1301               	backlight_init_ports:
 1302               	.LFB138:
 1303               		.cfi_startproc
 1304               	/* prologue: function */
 1305               	/* frame size = 0 */
 1306               	/* stack size = 0 */
 1307               	.L__stack_usage = 0
 1308               	/* epilogue start */
 1309 0000 0895      		ret
 1310               		.cfi_endproc
 1311               	.LFE138:
 1313               		.section	.text.send_nibble,"ax",@progbits
 1314               	.global	send_nibble
 1316               	send_nibble:
 1317               	.LVL111:
 1318               	.LFB125:
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 573:quantum/quantum.c ****     OCR1x = 0x0;
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1319               		.loc 1 835 34 view -0
 1320               		.cfi_startproc
 1321               		.loc 1 835 34 is_stmt 0 view .LVU303
 1322 0000 CF93      		push r28
 1323               	.LCFI27:
 1324               		.cfi_def_cfa_offset 3
 1325               		.cfi_offset 28, -2
 1326               	/* prologue: function */
 1327               	/* frame size = 0 */
 1328               	/* stack size = 1 */
 1329               	.L__stack_usage = 1
 836:quantum/quantum.c ****     switch (number) {
 1330               		.loc 1 836 5 is_stmt 1 view .LVU304
 1331 0002 8A30      		cpi r24,lo8(10)
 1332 0004 00F4      		brsh .L113
 1333 0006 8823      		tst r24
 1334 0008 01F0      		breq .L118
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 839:quantum/quantum.c ****             unregister_code(KC_0);
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1335               		.loc 1 842 13 view .LVU305
 1336 000a CDE1      		ldi r28,lo8(29)
 1337               	.L121:
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1338               		.loc 1 846 13 is_stmt 0 view .LVU306
 1339 000c C80F      		add r28,r24
 1340 000e 8C2F      		mov r24,r28
 1341               	.LVL112:
 1342               		.loc 1 846 13 view .LVU307
 1343 0010 0E94 0000 		call register_code
 1344               	.LVL113:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1345               		.loc 1 847 13 is_stmt 1 view .LVU308
 1346 0014 8C2F      		mov r24,r28
 1347 0016 00C0      		rjmp .L120
 1348               	.LVL114:
 1349               	.L113:
 846:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1350               		.loc 1 846 13 is_stmt 0 view .LVU309
 1351 0018 CAEF      		ldi r28,lo8(-6)
 836:quantum/quantum.c ****         case 0:
 1352               		.loc 1 836 5 view .LVU310
 1353 001a 8031      		cpi r24,lo8(16)
 1354 001c 00F0      		brlo .L121
 1355               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1356               		.loc 1 850 1 view .LVU311
 1357 001e CF91      		pop r28
 1358 0020 0895      		ret
 1359               	.L118:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1360               		.loc 1 838 13 is_stmt 1 view .LVU312
 1361 0022 87E2      		ldi r24,lo8(39)
 1362               	.LVL115:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1363               		.loc 1 838 13 is_stmt 0 view .LVU313
 1364 0024 0E94 0000 		call register_code
 1365               	.LVL116:
 839:quantum/quantum.c ****             break;
 1366               		.loc 1 839 13 is_stmt 1 view .LVU314
 1367 0028 87E2      		ldi r24,lo8(39)
 1368               	.L120:
 1369               	/* epilogue start */
 1370               		.loc 1 850 1 is_stmt 0 view .LVU315
 1371 002a CF91      		pop r28
 847:quantum/quantum.c ****             break;
 1372               		.loc 1 847 13 view .LVU316
 1373 002c 0C94 0000 		jmp unregister_code
 1374               	.LVL117:
 1375               		.cfi_endproc
 1376               	.LFE125:
 1378               		.section	.text.send_byte,"ax",@progbits
 1379               	.global	send_byte
 1381               	send_byte:
 1382               	.LVL118:
 1383               	.LFB124:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1384               		.loc 1 829 32 is_stmt 1 view -0
 1385               		.cfi_startproc
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1386               		.loc 1 829 32 is_stmt 0 view .LVU318
 1387 0000 CF93      		push r28
 1388               	.LCFI28:
 1389               		.cfi_def_cfa_offset 3
 1390               		.cfi_offset 28, -2
 1391               	/* prologue: function */
 1392               	/* frame size = 0 */
 1393               	/* stack size = 1 */
 1394               	.L__stack_usage = 1
 1395 0002 C82F      		mov r28,r24
 830:quantum/quantum.c ****     send_nibble(nibble);
 1396               		.loc 1 830 5 is_stmt 1 view .LVU319
 1397               	.LVL119:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1398               		.loc 1 831 5 view .LVU320
 1399 0004 8295      		swap r24
 1400               	.LVL120:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1401               		.loc 1 831 5 is_stmt 0 view .LVU321
 1402 0006 8F70      		andi r24,lo8(15)
 1403 0008 0E94 0000 		call send_nibble
 1404               	.LVL121:
 832:quantum/quantum.c **** }
 1405               		.loc 1 832 5 is_stmt 1 view .LVU322
 1406 000c 8C2F      		mov r24,r28
 1407 000e 8F70      		andi r24,lo8(15)
 1408               	/* epilogue start */
 833:quantum/quantum.c **** 
 1409               		.loc 1 833 1 is_stmt 0 view .LVU323
 1410 0010 CF91      		pop r28
 1411               	.LVL122:
 832:quantum/quantum.c **** }
 1412               		.loc 1 832 5 view .LVU324
 1413 0012 0C94 0000 		jmp send_nibble
 1414               	.LVL123:
 1415               		.cfi_endproc
 1416               	.LFE124:
 1418               		.section	.text.send_word,"ax",@progbits
 1419               	.global	send_word
 1421               	send_word:
 1422               	.LVL124:
 1423               	.LFB123:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1424               		.loc 1 823 33 is_stmt 1 view -0
 1425               		.cfi_startproc
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1426               		.loc 1 823 33 is_stmt 0 view .LVU326
 1427 0000 CF93      		push r28
 1428               	.LCFI29:
 1429               		.cfi_def_cfa_offset 3
 1430               		.cfi_offset 28, -2
 1431               	/* prologue: function */
 1432               	/* frame size = 0 */
 1433               	/* stack size = 1 */
 1434               	.L__stack_usage = 1
 1435 0002 C82F      		mov r28,r24
 824:quantum/quantum.c ****     send_byte(byte);
 1436               		.loc 1 824 5 is_stmt 1 view .LVU327
 1437               	.LVL125:
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1438               		.loc 1 825 5 view .LVU328
 1439 0004 892F      		mov r24,r25
 1440               	.LVL126:
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1441               		.loc 1 825 5 is_stmt 0 view .LVU329
 1442 0006 0E94 0000 		call send_byte
 1443               	.LVL127:
 826:quantum/quantum.c **** }
 1444               		.loc 1 826 5 is_stmt 1 view .LVU330
 1445 000a 8C2F      		mov r24,r28
 1446               	/* epilogue start */
 827:quantum/quantum.c **** 
 1447               		.loc 1 827 1 is_stmt 0 view .LVU331
 1448 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1449               		.loc 1 826 5 view .LVU332
 1450 000e 0C94 0000 		jmp send_byte
 1451               	.LVL128:
 1452               		.cfi_endproc
 1453               	.LFE123:
 1455               		.section	.text.send_dword,"ax",@progbits
 1456               	.global	send_dword
 1458               	send_dword:
 1459               	.LVL129:
 1460               	.LFB122:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1461               		.loc 1 817 34 is_stmt 1 view -0
 1462               		.cfi_startproc
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1463               		.loc 1 817 34 is_stmt 0 view .LVU334
 1464 0000 CF92      		push r12
 1465               	.LCFI30:
 1466               		.cfi_def_cfa_offset 3
 1467               		.cfi_offset 12, -2
 1468 0002 DF92      		push r13
 1469               	.LCFI31:
 1470               		.cfi_def_cfa_offset 4
 1471               		.cfi_offset 13, -3
 1472 0004 EF92      		push r14
 1473               	.LCFI32:
 1474               		.cfi_def_cfa_offset 5
 1475               		.cfi_offset 14, -4
 1476 0006 FF92      		push r15
 1477               	.LCFI33:
 1478               		.cfi_def_cfa_offset 6
 1479               		.cfi_offset 15, -5
 1480               	/* prologue: function */
 1481               	/* frame size = 0 */
 1482               	/* stack size = 4 */
 1483               	.L__stack_usage = 4
 1484 0008 6B01      		movw r12,r22
 818:quantum/quantum.c ****     send_word(word);
 1485               		.loc 1 818 5 is_stmt 1 view .LVU335
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1486               		.loc 1 819 5 view .LVU336
 1487 000a 0E94 0000 		call send_word
 1488               	.LVL130:
 820:quantum/quantum.c **** }
 1489               		.loc 1 820 5 view .LVU337
 1490 000e C601      		movw r24,r12
 1491               	/* epilogue start */
 821:quantum/quantum.c **** 
 1492               		.loc 1 821 1 is_stmt 0 view .LVU338
 1493 0010 FF90      		pop r15
 1494 0012 EF90      		pop r14
 1495 0014 DF90      		pop r13
 1496 0016 CF90      		pop r12
 820:quantum/quantum.c **** }
 1497               		.loc 1 820 5 view .LVU339
 1498 0018 0C94 0000 		jmp send_word
 1499               	.LVL131:
 1500               		.cfi_endproc
 1501               	.LFE122:
 1503               		.section	.text.api_send_unicode,"ax",@progbits
 1504               	.global	api_send_unicode
 1506               	api_send_unicode:
 1507               	.LVL132:
 1508               	.LFB126:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1509               		.loc 1 852 41 is_stmt 1 view -0
 1510               		.cfi_startproc
 1511               	/* prologue: function */
 1512               	/* frame size = 0 */
 1513               	/* stack size = 0 */
 1514               	.L__stack_usage = 0
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 1515               		.loc 1 858 1 view .LVU341
 1516               	/* epilogue start */
 1517 0000 0895      		ret
 1518               		.cfi_endproc
 1519               	.LFE126:
 1521               		.section	.text.led_set_user,"ax",@progbits
 1522               		.weak	led_set_user
 1524               	led_set_user:
 1525               	.LVL133:
 1526               	.LFB127:
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1527               		.loc 1 861 36 view -0
 1528               		.cfi_startproc
 1529               	/* prologue: function */
 1530               	/* frame size = 0 */
 1531               	/* stack size = 0 */
 1532               	.L__stack_usage = 0
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 1533               		.loc 1 863 1 view .LVU343
 1534               	/* epilogue start */
 1535 0000 0895      		ret
 1536               		.cfi_endproc
 1537               	.LFE127:
 1539               		.set	led_set_user.localalias.1,led_set_user
 1540               		.section	.text.backlight_set,"ax",@progbits
 1541               		.weak	backlight_set
 1543               	backlight_set:
 1544               	.LFB140:
 1545               		.cfi_startproc
 1546               	/* prologue: function */
 1547               	/* frame size = 0 */
 1548               	/* stack size = 0 */
 1549               	.L__stack_usage = 0
 1550               	/* epilogue start */
 1551 0000 0895      		ret
 1552               		.cfi_endproc
 1553               	.LFE140:
 1555               		.section	.text.led_set_kb,"ax",@progbits
 1556               		.weak	led_set_kb
 1558               	led_set_kb:
 1559               	.LVL134:
 1560               	.LFB128:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1561               		.loc 1 866 34 view -0
 1562               		.cfi_startproc
 1563               	/* prologue: function */
 1564               	/* frame size = 0 */
 1565               	/* stack size = 0 */
 1566               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1567               		.loc 1 867 5 view .LVU345
 1568 0000 0C94 0000 		jmp led_set_user
 1569               	.LVL135:
 1570               		.loc 1 867 5 is_stmt 0 view .LVU346
 1571               		.cfi_endproc
 1572               	.LFE128:
 1574               		.section	.text.led_init_ports,"ax",@progbits
 1575               		.weak	led_init_ports
 1577               	led_init_ports:
 1578               	.LFB129:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1579               		.loc 1 872 1 is_stmt 1 view -0
 1580               		.cfi_startproc
 1581               	/* prologue: function */
 1582               	/* frame size = 0 */
 1583               	/* stack size = 0 */
 1584               	.L__stack_usage = 0
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 1585               		.loc 1 874 1 view .LVU348
 1586               	/* epilogue start */
 1587 0000 0895      		ret
 1588               		.cfi_endproc
 1589               	.LFE129:
 1591               		.section	.text.led_set,"ax",@progbits
 1592               		.weak	led_set
 1594               	led_set:
 1595               	.LVL136:
 1596               	.LFB130:
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1597               		.loc 1 878 1 view -0
 1598               		.cfi_startproc
 1599               	/* prologue: function */
 1600               	/* frame size = 0 */
 1601               	/* stack size = 0 */
 1602               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1603               		.loc 1 896 3 view .LVU350
 1604 0000 0C94 0000 		jmp led_set_kb
 1605               	.LVL137:
 1606               		.loc 1 896 3 is_stmt 0 view .LVU351
 1607               		.cfi_endproc
 1608               	.LFE130:
 1610               		.section	.text.startup_user,"ax",@progbits
 1611               		.weak	startup_user
 1613               	startup_user:
 1614               	.LFB134:
 1615               		.cfi_startproc
 1616               	/* prologue: function */
 1617               	/* frame size = 0 */
 1618               	/* stack size = 0 */
 1619               	.L__stack_usage = 0
 1620               	/* epilogue start */
 1621 0000 0895      		ret
 1622               		.cfi_endproc
 1623               	.LFE134:
 1625               		.section	.text.shutdown_user,"ax",@progbits
 1626               		.weak	shutdown_user
 1628               	shutdown_user:
 1629               	.LFB136:
 1630               		.cfi_startproc
 1631               	/* prologue: function */
 1632               	/* frame size = 0 */
 1633               	/* stack size = 0 */
 1634               	.L__stack_usage = 0
 1635               	/* epilogue start */
 1636 0000 0895      		ret
 1637               		.cfi_endproc
 1638               	.LFE136:
 1640               	.global	ascii_to_qwerty_keycode_lut
 1641               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a"
 1644               	ascii_to_qwerty_keycode_lut:
 1645 0000 00        		.byte	0
 1646 0001 00        		.byte	0
 1647 0002 00        		.byte	0
 1648 0003 00        		.byte	0
 1649 0004 00        		.byte	0
 1650 0005 00        		.byte	0
 1651 0006 00        		.byte	0
 1652 0007 00        		.byte	0
 1653 0008 2A        		.byte	42
 1654 0009 2B        		.byte	43
 1655 000a 28        		.byte	40
 1656 000b 00        		.byte	0
 1657 000c 00        		.byte	0
 1658 000d 00        		.byte	0
 1659 000e 00        		.byte	0
 1660 000f 00        		.byte	0
 1661 0010 00        		.byte	0
 1662 0011 00        		.byte	0
 1663 0012 00        		.byte	0
 1664 0013 00        		.byte	0
 1665 0014 00        		.byte	0
 1666 0015 00        		.byte	0
 1667 0016 00        		.byte	0
 1668 0017 00        		.byte	0
 1669 0018 00        		.byte	0
 1670 0019 00        		.byte	0
 1671 001a 00        		.byte	0
 1672 001b 29        		.byte	41
 1673 001c 00        		.byte	0
 1674 001d 00        		.byte	0
 1675 001e 00        		.byte	0
 1676 001f 00        		.byte	0
 1677 0020 2C        		.byte	44
 1678 0021 1E        		.byte	30
 1679 0022 34        		.byte	52
 1680 0023 20        		.byte	32
 1681 0024 21        		.byte	33
 1682 0025 22        		.byte	34
 1683 0026 24        		.byte	36
 1684 0027 34        		.byte	52
 1685 0028 26        		.byte	38
 1686 0029 27        		.byte	39
 1687 002a 25        		.byte	37
 1688 002b 2E        		.byte	46
 1689 002c 36        		.byte	54
 1690 002d 2D        		.byte	45
 1691 002e 37        		.byte	55
 1692 002f 38        		.byte	56
 1693 0030 27        		.byte	39
 1694 0031 1E        		.byte	30
 1695 0032 1F        		.byte	31
 1696 0033 20        		.byte	32
 1697 0034 21        		.byte	33
 1698 0035 22        		.byte	34
 1699 0036 23        		.byte	35
 1700 0037 24        		.byte	36
 1701 0038 25        		.byte	37
 1702 0039 26        		.byte	38
 1703 003a 33        		.byte	51
 1704 003b 33        		.byte	51
 1705 003c 36        		.byte	54
 1706 003d 2E        		.byte	46
 1707 003e 37        		.byte	55
 1708 003f 38        		.byte	56
 1709 0040 1F        		.byte	31
 1710 0041 04        		.byte	4
 1711 0042 05        		.byte	5
 1712 0043 06        		.byte	6
 1713 0044 07        		.byte	7
 1714 0045 08        		.byte	8
 1715 0046 09        		.byte	9
 1716 0047 0A        		.byte	10
 1717 0048 0B        		.byte	11
 1718 0049 0C        		.byte	12
 1719 004a 0D        		.byte	13
 1720 004b 0E        		.byte	14
 1721 004c 0F        		.byte	15
 1722 004d 10        		.byte	16
 1723 004e 11        		.byte	17
 1724 004f 12        		.byte	18
 1725 0050 13        		.byte	19
 1726 0051 14        		.byte	20
 1727 0052 15        		.byte	21
 1728 0053 16        		.byte	22
 1729 0054 17        		.byte	23
 1730 0055 18        		.byte	24
 1731 0056 19        		.byte	25
 1732 0057 1A        		.byte	26
 1733 0058 1B        		.byte	27
 1734 0059 1C        		.byte	28
 1735 005a 1D        		.byte	29
 1736 005b 2F        		.byte	47
 1737 005c 31        		.byte	49
 1738 005d 30        		.byte	48
 1739 005e 23        		.byte	35
 1740 005f 2D        		.byte	45
 1741 0060 35        		.byte	53
 1742 0061 04        		.byte	4
 1743 0062 05        		.byte	5
 1744 0063 06        		.byte	6
 1745 0064 07        		.byte	7
 1746 0065 08        		.byte	8
 1747 0066 09        		.byte	9
 1748 0067 0A        		.byte	10
 1749 0068 0B        		.byte	11
 1750 0069 0C        		.byte	12
 1751 006a 0D        		.byte	13
 1752 006b 0E        		.byte	14
 1753 006c 0F        		.byte	15
 1754 006d 10        		.byte	16
 1755 006e 11        		.byte	17
 1756 006f 12        		.byte	18
 1757 0070 13        		.byte	19
 1758 0071 14        		.byte	20
 1759 0072 15        		.byte	21
 1760 0073 16        		.byte	22
 1761 0074 17        		.byte	23
 1762 0075 18        		.byte	24
 1763 0076 19        		.byte	25
 1764 0077 1A        		.byte	26
 1765 0078 1B        		.byte	27
 1766 0079 1C        		.byte	28
 1767 007a 1D        		.byte	29
 1768 007b 2F        		.byte	47
 1769 007c 31        		.byte	49
 1770 007d 30        		.byte	48
 1771 007e 35        		.byte	53
 1772 007f 4C        		.byte	76
 1773               	.global	ascii_to_qwerty_shift_lut
 1774               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a"
 1777               	ascii_to_qwerty_shift_lut:
 1778 0000 00        		.byte	0
 1779 0001 00        		.byte	0
 1780 0002 00        		.byte	0
 1781 0003 00        		.byte	0
 1782 0004 00        		.byte	0
 1783 0005 00        		.byte	0
 1784 0006 00        		.byte	0
 1785 0007 00        		.byte	0
 1786 0008 00        		.byte	0
 1787 0009 00        		.byte	0
 1788 000a 00        		.byte	0
 1789 000b 00        		.byte	0
 1790 000c 00        		.byte	0
 1791 000d 00        		.byte	0
 1792 000e 00        		.byte	0
 1793 000f 00        		.byte	0
 1794 0010 00        		.byte	0
 1795 0011 00        		.byte	0
 1796 0012 00        		.byte	0
 1797 0013 00        		.byte	0
 1798 0014 00        		.byte	0
 1799 0015 00        		.byte	0
 1800 0016 00        		.byte	0
 1801 0017 00        		.byte	0
 1802 0018 00        		.byte	0
 1803 0019 00        		.byte	0
 1804 001a 00        		.byte	0
 1805 001b 00        		.byte	0
 1806 001c 00        		.byte	0
 1807 001d 00        		.byte	0
 1808 001e 00        		.byte	0
 1809 001f 00        		.byte	0
 1810 0020 00        		.byte	0
 1811 0021 01        		.byte	1
 1812 0022 01        		.byte	1
 1813 0023 01        		.byte	1
 1814 0024 01        		.byte	1
 1815 0025 01        		.byte	1
 1816 0026 01        		.byte	1
 1817 0027 00        		.byte	0
 1818 0028 01        		.byte	1
 1819 0029 01        		.byte	1
 1820 002a 01        		.byte	1
 1821 002b 01        		.byte	1
 1822 002c 00        		.byte	0
 1823 002d 00        		.byte	0
 1824 002e 00        		.byte	0
 1825 002f 00        		.byte	0
 1826 0030 00        		.byte	0
 1827 0031 00        		.byte	0
 1828 0032 00        		.byte	0
 1829 0033 00        		.byte	0
 1830 0034 00        		.byte	0
 1831 0035 00        		.byte	0
 1832 0036 00        		.byte	0
 1833 0037 00        		.byte	0
 1834 0038 00        		.byte	0
 1835 0039 00        		.byte	0
 1836 003a 01        		.byte	1
 1837 003b 00        		.byte	0
 1838 003c 01        		.byte	1
 1839 003d 00        		.byte	0
 1840 003e 01        		.byte	1
 1841 003f 01        		.byte	1
 1842 0040 01        		.byte	1
 1843 0041 01        		.byte	1
 1844 0042 01        		.byte	1
 1845 0043 01        		.byte	1
 1846 0044 01        		.byte	1
 1847 0045 01        		.byte	1
 1848 0046 01        		.byte	1
 1849 0047 01        		.byte	1
 1850 0048 01        		.byte	1
 1851 0049 01        		.byte	1
 1852 004a 01        		.byte	1
 1853 004b 01        		.byte	1
 1854 004c 01        		.byte	1
 1855 004d 01        		.byte	1
 1856 004e 01        		.byte	1
 1857 004f 01        		.byte	1
 1858 0050 01        		.byte	1
 1859 0051 01        		.byte	1
 1860 0052 01        		.byte	1
 1861 0053 01        		.byte	1
 1862 0054 01        		.byte	1
 1863 0055 01        		.byte	1
 1864 0056 01        		.byte	1
 1865 0057 01        		.byte	1
 1866 0058 01        		.byte	1
 1867 0059 01        		.byte	1
 1868 005a 01        		.byte	1
 1869 005b 00        		.byte	0
 1870 005c 00        		.byte	0
 1871 005d 00        		.byte	0
 1872 005e 01        		.byte	1
 1873 005f 01        		.byte	1
 1874 0060 00        		.byte	0
 1875 0061 00        		.byte	0
 1876 0062 00        		.byte	0
 1877 0063 00        		.byte	0
 1878 0064 00        		.byte	0
 1879 0065 00        		.byte	0
 1880 0066 00        		.byte	0
 1881 0067 00        		.byte	0
 1882 0068 00        		.byte	0
 1883 0069 00        		.byte	0
 1884 006a 00        		.byte	0
 1885 006b 00        		.byte	0
 1886 006c 00        		.byte	0
 1887 006d 00        		.byte	0
 1888 006e 00        		.byte	0
 1889 006f 00        		.byte	0
 1890 0070 00        		.byte	0
 1891 0071 00        		.byte	0
 1892 0072 00        		.byte	0
 1893 0073 00        		.byte	0
 1894 0074 00        		.byte	0
 1895 0075 00        		.byte	0
 1896 0076 00        		.byte	0
 1897 0077 00        		.byte	0
 1898 0078 00        		.byte	0
 1899 0079 00        		.byte	0
 1900 007a 00        		.byte	0
 1901 007b 01        		.byte	1
 1902 007c 01        		.byte	1
 1903 007d 01        		.byte	1
 1904 007e 01        		.byte	1
 1905 007f 00        		.byte	0
 1906               		.section	.bss.scs_timer,"aw",@nobits
 1909               	scs_timer:
 1910 0000 0000      		.zero	2
 1911               		.section	.bss.shift_interrupted,"aw",@nobits
 1914               	shift_interrupted:
 1915 0000 0000      		.zero	2
 1916               		.text
 1917               	.Letext0:
 1918               		.file 3 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1919               		.file 4 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\lib\\gcc\\avr\\8.3.0\\include
 1920               		.file 5 "./tmk_core/common/keyboard.h"
 1921               		.file 6 "./tmk_core/common/action.h"
 1922               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1923               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1924               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1925               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1926               		.file 11 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdio.h"
 1927               		.file 12 "./tmk_core/common/report.h"
 1928               		.file 13 "./tmk_core/common/host.h"
 1929               		.file 14 "./tmk_core/common/debug.h"
 1930               		.file 15 "quantum/keycode_config.h"
 1931               		.file 16 "./tmk_core/common/keycode.h"
 1932               		.file 17 "quantum/quantum_keycodes.h"
 1933               		.file 18 "quantum/keymap.h"
 1934               		.file 19 "./tmk_core/common/action_layer.h"
 1935               		.file 20 "./tmk_core/common/timer.h"
 1936               		.file 21 "./tmk_core/common/action_util.h"
 1937               		.file 22 "c:\\msys64\\home\\pc-office\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdlib.h"
 1938               		.file 23 "quantum/quantum.h"
 1939               		.file 24 "./quantum/process_keycode/process_leader.h"
 1940               		.file 25 "./tmk_core/common/eeconfig.h"
 1941               		.file 26 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:00000000 quantum.c
C:\msys64\tmp\ccQgFXxX.s:2      *ABS*:0000003e __SP_H__
C:\msys64\tmp\ccQgFXxX.s:3      *ABS*:0000003d __SP_L__
C:\msys64\tmp\ccQgFXxX.s:4      *ABS*:0000003f __SREG__
C:\msys64\tmp\ccQgFXxX.s:5      *ABS*:00000000 __tmp_reg__
C:\msys64\tmp\ccQgFXxX.s:6      *ABS*:00000001 __zero_reg__
C:\msys64\tmp\ccQgFXxX.s:12     .text.do_code16:00000000 do_code16
C:\msys64\tmp\ccQgFXxX.s:146    .text.register_code16:00000000 register_code16
C:\msys64\tmp\ccQgFXxX.s:180    .text.unregister_code16:00000000 unregister_code16
C:\msys64\tmp\ccQgFXxX.s:221    .text.process_action_kb:00000000 process_action_kb
C:\msys64\tmp\ccQgFXxX.s:243    .text.process_record_user:00000000 process_record_user
C:\msys64\tmp\ccQgFXxX.s:265    .text.process_record_kb:00000000 process_record_kb
C:\msys64\tmp\ccQgFXxX.s:285    .text.reset_keyboard:00000000 reset_keyboard
C:\msys64\tmp\ccQgFXxX.s:330    .text.process_record_quantum:00000000 process_record_quantum
C:\msys64\tmp\ccQgFXxX.s:1914   .bss.shift_interrupted:00000000 shift_interrupted
C:\msys64\tmp\ccQgFXxX.s:1909   .bss.scs_timer:00000000 scs_timer
C:\msys64\tmp\ccQgFXxX.s:843    .text.send_string:00000000 send_string
C:\msys64\tmp\ccQgFXxX.s:1644   .progmem.data.ascii_to_qwerty_keycode_lut:00000000 ascii_to_qwerty_keycode_lut
C:\msys64\tmp\ccQgFXxX.s:1777   .progmem.data.ascii_to_qwerty_shift_lut:00000000 ascii_to_qwerty_shift_lut
C:\msys64\tmp\ccQgFXxX.s:991    .text.update_tri_layer:00000000 update_tri_layer
C:\msys64\tmp\ccQgFXxX.s:1132   .text.tap_random_base64:00000000 tap_random_base64
C:\msys64\tmp\ccQgFXxX.s:1267   .text.matrix_init_quantum:00000000 matrix_init_quantum
C:\msys64\tmp\ccQgFXxX.s:1284   .text.matrix_scan_quantum:00000000 matrix_scan_quantum
C:\msys64\tmp\ccQgFXxX.s:1301   .text.backlight_init_ports:00000000 backlight_init_ports
C:\msys64\tmp\ccQgFXxX.s:1316   .text.send_nibble:00000000 send_nibble
C:\msys64\tmp\ccQgFXxX.s:1381   .text.send_byte:00000000 send_byte
C:\msys64\tmp\ccQgFXxX.s:1421   .text.send_word:00000000 send_word
C:\msys64\tmp\ccQgFXxX.s:1458   .text.send_dword:00000000 send_dword
C:\msys64\tmp\ccQgFXxX.s:1506   .text.api_send_unicode:00000000 api_send_unicode
C:\msys64\tmp\ccQgFXxX.s:1524   .text.led_set_user:00000000 led_set_user
C:\msys64\tmp\ccQgFXxX.s:1524   .text.led_set_user:00000000 led_set_user.localalias.1
C:\msys64\tmp\ccQgFXxX.s:1543   .text.backlight_set:00000000 backlight_set
C:\msys64\tmp\ccQgFXxX.s:1558   .text.led_set_kb:00000000 led_set_kb
C:\msys64\tmp\ccQgFXxX.s:1577   .text.led_init_ports:00000000 led_init_ports
C:\msys64\tmp\ccQgFXxX.s:1594   .text.led_set:00000000 led_set
C:\msys64\tmp\ccQgFXxX.s:1613   .text.startup_user:00000000 startup_user
C:\msys64\tmp\ccQgFXxX.s:1628   .text.shutdown_user:00000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_leader
read_source_layers_cache
timer_read
debug_config
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
